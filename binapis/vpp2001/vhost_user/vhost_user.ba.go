// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/vpp2001/.vppapi/core/vhost_user.api.json

/*
Package vhost_user is a generated VPP binary API for 'vhost_user' module.

It consists of:
	  8 enums
	  2 aliases
	  8 messages
	  4 services
*/
package vhost_user

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "vhost_user"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xb547a33d
)

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 1
	IF_API_TYPE_SUB      IfType = 2
	IF_API_TYPE_P2P      IfType = 3
	IF_API_TYPE_PIPE     IfType = 4
)

var IfType_name = map[uint32]string{
	1: "IF_API_TYPE_HARDWARE",
	2: "IF_API_TYPE_SUB",
	3: "IF_API_TYPE_P2P",
	4: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 1,
	"IF_API_TYPE_SUB":      2,
	"IF_API_TYPE_P2P":      3,
	"IF_API_TYPE_PIPE":     4,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 1
	MTU_PROTO_API_IP4  MtuProto = 2
	MTU_PROTO_API_IP6  MtuProto = 3
	MTU_PROTO_API_MPLS MtuProto = 4
	MTU_PROTO_API_N    MtuProto = 5
)

var MtuProto_name = map[uint32]string{
	1: "MTU_PROTO_API_L3",
	2: "MTU_PROTO_API_IP4",
	3: "MTU_PROTO_API_IP6",
	4: "MTU_PROTO_API_MPLS",
	5: "MTU_PROTO_API_N",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   1,
	"MTU_PROTO_API_IP4":  2,
	"MTU_PROTO_API_IP6":  3,
	"MTU_PROTO_API_MPLS": 4,
	"MTU_PROTO_API_N":    5,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// VirtioNetFeaturesFirst32 represents VPP binary API enum 'virtio_net_features_first_32'.
type VirtioNetFeaturesFirst32 uint32

const (
	VIRTIO_NET_F_API_CSUM              VirtioNetFeaturesFirst32 = 1
	VIRTIO_NET_F_API_GUEST_CSUM        VirtioNetFeaturesFirst32 = 2
	VIRTIO_NET_F_API_GUEST_TSO4        VirtioNetFeaturesFirst32 = 128
	VIRTIO_NET_F_API_GUEST_TSO6        VirtioNetFeaturesFirst32 = 256
	VIRTIO_NET_F_API_GUEST_UFO         VirtioNetFeaturesFirst32 = 1024
	VIRTIO_NET_F_API_HOST_TSO4         VirtioNetFeaturesFirst32 = 2048
	VIRTIO_NET_F_API_HOST_TSO6         VirtioNetFeaturesFirst32 = 4096
	VIRTIO_NET_F_API_HOST_UFO          VirtioNetFeaturesFirst32 = 16384
	VIRTIO_NET_F_API_MRG_RXBUF         VirtioNetFeaturesFirst32 = 32768
	VIRTIO_NET_F_API_CTRL_VQ           VirtioNetFeaturesFirst32 = 131072
	VIRTIO_NET_F_API_GUEST_ANNOUNCE    VirtioNetFeaturesFirst32 = 2.097152e+06
	VIRTIO_NET_F_API_MQ                VirtioNetFeaturesFirst32 = 4.194304e+06
	VHOST_F_API_LOG_ALL                VirtioNetFeaturesFirst32 = 6.7108864e+07
	VIRTIO_F_API_ANY_LAYOUT            VirtioNetFeaturesFirst32 = 1.34217728e+08
	VIRTIO_F_API_INDIRECT_DESC         VirtioNetFeaturesFirst32 = 2.68435456e+08
	VHOST_USER_F_API_PROTOCOL_FEATURES VirtioNetFeaturesFirst32 = 1.073741824e+09
)

var VirtioNetFeaturesFirst32_name = map[uint32]string{
	1:               "VIRTIO_NET_F_API_CSUM",
	2:               "VIRTIO_NET_F_API_GUEST_CSUM",
	128:             "VIRTIO_NET_F_API_GUEST_TSO4",
	256:             "VIRTIO_NET_F_API_GUEST_TSO6",
	1024:            "VIRTIO_NET_F_API_GUEST_UFO",
	2048:            "VIRTIO_NET_F_API_HOST_TSO4",
	4096:            "VIRTIO_NET_F_API_HOST_TSO6",
	16384:           "VIRTIO_NET_F_API_HOST_UFO",
	32768:           "VIRTIO_NET_F_API_MRG_RXBUF",
	131072:          "VIRTIO_NET_F_API_CTRL_VQ",
	2.097152e+06:    "VIRTIO_NET_F_API_GUEST_ANNOUNCE",
	4.194304e+06:    "VIRTIO_NET_F_API_MQ",
	6.7108864e+07:   "VHOST_F_API_LOG_ALL",
	1.34217728e+08:  "VIRTIO_F_API_ANY_LAYOUT",
	2.68435456e+08:  "VIRTIO_F_API_INDIRECT_DESC",
	1.073741824e+09: "VHOST_USER_F_API_PROTOCOL_FEATURES",
}

var VirtioNetFeaturesFirst32_value = map[string]uint32{
	"VIRTIO_NET_F_API_CSUM":              1,
	"VIRTIO_NET_F_API_GUEST_CSUM":        2,
	"VIRTIO_NET_F_API_GUEST_TSO4":        128,
	"VIRTIO_NET_F_API_GUEST_TSO6":        256,
	"VIRTIO_NET_F_API_GUEST_UFO":         1024,
	"VIRTIO_NET_F_API_HOST_TSO4":         2048,
	"VIRTIO_NET_F_API_HOST_TSO6":         4096,
	"VIRTIO_NET_F_API_HOST_UFO":          16384,
	"VIRTIO_NET_F_API_MRG_RXBUF":         32768,
	"VIRTIO_NET_F_API_CTRL_VQ":           131072,
	"VIRTIO_NET_F_API_GUEST_ANNOUNCE":    2.097152e+06,
	"VIRTIO_NET_F_API_MQ":                4.194304e+06,
	"VHOST_F_API_LOG_ALL":                6.7108864e+07,
	"VIRTIO_F_API_ANY_LAYOUT":            1.34217728e+08,
	"VIRTIO_F_API_INDIRECT_DESC":         2.68435456e+08,
	"VHOST_USER_F_API_PROTOCOL_FEATURES": 1.073741824e+09,
}

func (x VirtioNetFeaturesFirst32) String() string {
	s, ok := VirtioNetFeaturesFirst32_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// VirtioNetFeaturesLast32 represents VPP binary API enum 'virtio_net_features_last_32'.
type VirtioNetFeaturesLast32 uint32

const (
	VIRTIO_F_API_VERSION_1 VirtioNetFeaturesLast32 = 1
)

var VirtioNetFeaturesLast32_name = map[uint32]string{
	1: "VIRTIO_F_API_VERSION_1",
}

var VirtioNetFeaturesLast32_value = map[string]uint32{
	"VIRTIO_F_API_VERSION_1": 1,
}

func (x VirtioNetFeaturesLast32) String() string {
	s, ok := VirtioNetFeaturesLast32_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// MacAddress represents VPP binary API alias 'mac_address'.
type MacAddress [6]uint8

// CreateVhostUserIf represents VPP binary API message 'create_vhost_user_if'.
type CreateVhostUserIf struct {
	IsServer            bool
	SockFilename        string `struc:"[256]byte"`
	Renumber            bool
	DisableMrgRxbuf     bool
	DisableIndirectDesc bool
	EnableGso           bool
	CustomDevInstance   uint32
	UseCustomMac        bool
	MacAddress          MacAddress
	Tag                 string `struc:"[64]byte"`
}

func (m *CreateVhostUserIf) Reset()                        { *m = CreateVhostUserIf{} }
func (*CreateVhostUserIf) GetMessageName() string          { return "create_vhost_user_if" }
func (*CreateVhostUserIf) GetCrcString() string            { return "591ee951" }
func (*CreateVhostUserIf) GetMessageType() api.MessageType { return api.RequestMessage }

// CreateVhostUserIfReply represents VPP binary API message 'create_vhost_user_if_reply'.
type CreateVhostUserIfReply struct {
	Retval    int32
	SwIfIndex InterfaceIndex
}

func (m *CreateVhostUserIfReply) Reset()                        { *m = CreateVhostUserIfReply{} }
func (*CreateVhostUserIfReply) GetMessageName() string          { return "create_vhost_user_if_reply" }
func (*CreateVhostUserIfReply) GetCrcString() string            { return "5383d31f" }
func (*CreateVhostUserIfReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// DeleteVhostUserIf represents VPP binary API message 'delete_vhost_user_if'.
type DeleteVhostUserIf struct {
	SwIfIndex InterfaceIndex
}

func (m *DeleteVhostUserIf) Reset()                        { *m = DeleteVhostUserIf{} }
func (*DeleteVhostUserIf) GetMessageName() string          { return "delete_vhost_user_if" }
func (*DeleteVhostUserIf) GetCrcString() string            { return "f9e6675e" }
func (*DeleteVhostUserIf) GetMessageType() api.MessageType { return api.RequestMessage }

// DeleteVhostUserIfReply represents VPP binary API message 'delete_vhost_user_if_reply'.
type DeleteVhostUserIfReply struct {
	Retval int32
}

func (m *DeleteVhostUserIfReply) Reset()                        { *m = DeleteVhostUserIfReply{} }
func (*DeleteVhostUserIfReply) GetMessageName() string          { return "delete_vhost_user_if_reply" }
func (*DeleteVhostUserIfReply) GetCrcString() string            { return "e8d4e804" }
func (*DeleteVhostUserIfReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ModifyVhostUserIf represents VPP binary API message 'modify_vhost_user_if'.
type ModifyVhostUserIf struct {
	SwIfIndex         InterfaceIndex
	IsServer          bool
	SockFilename      string `struc:"[256]byte"`
	Renumber          bool
	EnableGso         bool
	CustomDevInstance uint32
}

func (m *ModifyVhostUserIf) Reset()                        { *m = ModifyVhostUserIf{} }
func (*ModifyVhostUserIf) GetMessageName() string          { return "modify_vhost_user_if" }
func (*ModifyVhostUserIf) GetCrcString() string            { return "fcfeaf16" }
func (*ModifyVhostUserIf) GetMessageType() api.MessageType { return api.RequestMessage }

// ModifyVhostUserIfReply represents VPP binary API message 'modify_vhost_user_if_reply'.
type ModifyVhostUserIfReply struct {
	Retval int32
}

func (m *ModifyVhostUserIfReply) Reset()                        { *m = ModifyVhostUserIfReply{} }
func (*ModifyVhostUserIfReply) GetMessageName() string          { return "modify_vhost_user_if_reply" }
func (*ModifyVhostUserIfReply) GetCrcString() string            { return "e8d4e804" }
func (*ModifyVhostUserIfReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SwInterfaceVhostUserDetails represents VPP binary API message 'sw_interface_vhost_user_details'.
type SwInterfaceVhostUserDetails struct {
	SwIfIndex       InterfaceIndex
	InterfaceName   string `struc:"[64]byte"`
	VirtioNetHdrSz  uint32
	FeaturesFirst32 VirtioNetFeaturesFirst32
	FeaturesLast32  VirtioNetFeaturesLast32
	IsServer        bool
	SockFilename    string `struc:"[256]byte"`
	NumRegions      uint32
	SockErrno       int32
}

func (m *SwInterfaceVhostUserDetails) Reset()                        { *m = SwInterfaceVhostUserDetails{} }
func (*SwInterfaceVhostUserDetails) GetMessageName() string          { return "sw_interface_vhost_user_details" }
func (*SwInterfaceVhostUserDetails) GetCrcString() string            { return "98530df1" }
func (*SwInterfaceVhostUserDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// SwInterfaceVhostUserDump represents VPP binary API message 'sw_interface_vhost_user_dump'.
type SwInterfaceVhostUserDump struct {
	SwIfIndex InterfaceIndex
}

func (m *SwInterfaceVhostUserDump) Reset()                        { *m = SwInterfaceVhostUserDump{} }
func (*SwInterfaceVhostUserDump) GetMessageName() string          { return "sw_interface_vhost_user_dump" }
func (*SwInterfaceVhostUserDump) GetCrcString() string            { return "f9e6675e" }
func (*SwInterfaceVhostUserDump) GetMessageType() api.MessageType { return api.RequestMessage }

func init() {
	api.RegisterMessage((*CreateVhostUserIf)(nil), "vhost_user.CreateVhostUserIf")
	api.RegisterMessage((*CreateVhostUserIfReply)(nil), "vhost_user.CreateVhostUserIfReply")
	api.RegisterMessage((*DeleteVhostUserIf)(nil), "vhost_user.DeleteVhostUserIf")
	api.RegisterMessage((*DeleteVhostUserIfReply)(nil), "vhost_user.DeleteVhostUserIfReply")
	api.RegisterMessage((*ModifyVhostUserIf)(nil), "vhost_user.ModifyVhostUserIf")
	api.RegisterMessage((*ModifyVhostUserIfReply)(nil), "vhost_user.ModifyVhostUserIfReply")
	api.RegisterMessage((*SwInterfaceVhostUserDetails)(nil), "vhost_user.SwInterfaceVhostUserDetails")
	api.RegisterMessage((*SwInterfaceVhostUserDump)(nil), "vhost_user.SwInterfaceVhostUserDump")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*CreateVhostUserIf)(nil),
		(*CreateVhostUserIfReply)(nil),
		(*DeleteVhostUserIf)(nil),
		(*DeleteVhostUserIfReply)(nil),
		(*ModifyVhostUserIf)(nil),
		(*ModifyVhostUserIfReply)(nil),
		(*SwInterfaceVhostUserDetails)(nil),
		(*SwInterfaceVhostUserDump)(nil),
	}
}

// RPCService represents RPC service API for vhost_user module.
type RPCService interface {
	DumpSwInterfaceVhostUser(ctx context.Context, in *SwInterfaceVhostUserDump) (RPCService_DumpSwInterfaceVhostUserClient, error)
	CreateVhostUserIf(ctx context.Context, in *CreateVhostUserIf) (*CreateVhostUserIfReply, error)
	DeleteVhostUserIf(ctx context.Context, in *DeleteVhostUserIf) (*DeleteVhostUserIfReply, error)
	ModifyVhostUserIf(ctx context.Context, in *ModifyVhostUserIf) (*ModifyVhostUserIfReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpSwInterfaceVhostUser(ctx context.Context, in *SwInterfaceVhostUserDump) (RPCService_DumpSwInterfaceVhostUserClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSwInterfaceVhostUserClient{stream}
	return x, nil
}

type RPCService_DumpSwInterfaceVhostUserClient interface {
	Recv() (*SwInterfaceVhostUserDetails, error)
}

type serviceClient_DumpSwInterfaceVhostUserClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSwInterfaceVhostUserClient) Recv() (*SwInterfaceVhostUserDetails, error) {
	m := new(SwInterfaceVhostUserDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) CreateVhostUserIf(ctx context.Context, in *CreateVhostUserIf) (*CreateVhostUserIfReply, error) {
	out := new(CreateVhostUserIfReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteVhostUserIf(ctx context.Context, in *DeleteVhostUserIf) (*DeleteVhostUserIfReply, error) {
	out := new(DeleteVhostUserIfReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ModifyVhostUserIf(ctx context.Context, in *ModifyVhostUserIf) (*ModifyVhostUserIfReply, error) {
	out := new(ModifyVhostUserIfReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
