// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/vpp2001/.vppapi/plugins/nsh.api.json

/*
Package nsh is a generated VPP binary API for 'nsh' module.

It consists of:
	  6 enums
	  1 alias
	  8 messages
	  4 services
*/
package nsh

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "nsh"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xac2c8897
)

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 1
	IF_API_TYPE_SUB      IfType = 2
	IF_API_TYPE_P2P      IfType = 3
	IF_API_TYPE_PIPE     IfType = 4
)

var IfType_name = map[uint32]string{
	1: "IF_API_TYPE_HARDWARE",
	2: "IF_API_TYPE_SUB",
	3: "IF_API_TYPE_P2P",
	4: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 1,
	"IF_API_TYPE_SUB":      2,
	"IF_API_TYPE_P2P":      3,
	"IF_API_TYPE_PIPE":     4,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 1
	MTU_PROTO_API_IP4  MtuProto = 2
	MTU_PROTO_API_IP6  MtuProto = 3
	MTU_PROTO_API_MPLS MtuProto = 4
	MTU_PROTO_API_N    MtuProto = 5
)

var MtuProto_name = map[uint32]string{
	1: "MTU_PROTO_API_L3",
	2: "MTU_PROTO_API_IP4",
	3: "MTU_PROTO_API_IP6",
	4: "MTU_PROTO_API_MPLS",
	5: "MTU_PROTO_API_N",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   1,
	"MTU_PROTO_API_IP4":  2,
	"MTU_PROTO_API_IP6":  3,
	"MTU_PROTO_API_MPLS": 4,
	"MTU_PROTO_API_N":    5,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// NshAddDelEntry represents VPP binary API message 'nsh_add_del_entry'.
type NshAddDelEntry struct {
	IsAdd        bool
	NspNsi       uint32
	MdType       uint8
	VerOC        uint8
	TTL          uint8
	Length       uint8
	NextProtocol uint8
	C1           uint32
	C2           uint32
	C3           uint32
	C4           uint32
	TlvLength    uint8
	Tlv          []byte `struc:"[248]byte"`
}

func (m *NshAddDelEntry) Reset()                        { *m = NshAddDelEntry{} }
func (*NshAddDelEntry) GetMessageName() string          { return "nsh_add_del_entry" }
func (*NshAddDelEntry) GetCrcString() string            { return "7dea480b" }
func (*NshAddDelEntry) GetMessageType() api.MessageType { return api.RequestMessage }

// NshAddDelEntryReply represents VPP binary API message 'nsh_add_del_entry_reply'.
type NshAddDelEntryReply struct {
	Retval     int32
	EntryIndex uint32
}

func (m *NshAddDelEntryReply) Reset()                        { *m = NshAddDelEntryReply{} }
func (*NshAddDelEntryReply) GetMessageName() string          { return "nsh_add_del_entry_reply" }
func (*NshAddDelEntryReply) GetCrcString() string            { return "6296a9eb" }
func (*NshAddDelEntryReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// NshAddDelMap represents VPP binary API message 'nsh_add_del_map'.
type NshAddDelMap struct {
	IsAdd        bool
	NspNsi       uint32
	MappedNspNsi uint32
	NshAction    uint32
	SwIfIndex    InterfaceIndex
	RxSwIfIndex  InterfaceIndex
	NextNode     uint32
}

func (m *NshAddDelMap) Reset()                        { *m = NshAddDelMap{} }
func (*NshAddDelMap) GetMessageName() string          { return "nsh_add_del_map" }
func (*NshAddDelMap) GetCrcString() string            { return "898d857d" }
func (*NshAddDelMap) GetMessageType() api.MessageType { return api.RequestMessage }

// NshAddDelMapReply represents VPP binary API message 'nsh_add_del_map_reply'.
type NshAddDelMapReply struct {
	Retval   int32
	MapIndex uint32
}

func (m *NshAddDelMapReply) Reset()                        { *m = NshAddDelMapReply{} }
func (*NshAddDelMapReply) GetMessageName() string          { return "nsh_add_del_map_reply" }
func (*NshAddDelMapReply) GetCrcString() string            { return "b2b127ef" }
func (*NshAddDelMapReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// NshEntryDetails represents VPP binary API message 'nsh_entry_details'.
type NshEntryDetails struct {
	EntryIndex   uint32
	NspNsi       uint32
	MdType       uint8
	VerOC        uint8
	TTL          uint8
	Length       uint8
	NextProtocol uint8
	C1           uint32
	C2           uint32
	C3           uint32
	C4           uint32
	TlvLength    uint8
	Tlv          []byte `struc:"[248]byte"`
}

func (m *NshEntryDetails) Reset()                        { *m = NshEntryDetails{} }
func (*NshEntryDetails) GetMessageName() string          { return "nsh_entry_details" }
func (*NshEntryDetails) GetCrcString() string            { return "046fb556" }
func (*NshEntryDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// NshEntryDump represents VPP binary API message 'nsh_entry_dump'.
type NshEntryDump struct {
	EntryIndex uint32
}

func (m *NshEntryDump) Reset()                        { *m = NshEntryDump{} }
func (*NshEntryDump) GetMessageName() string          { return "nsh_entry_dump" }
func (*NshEntryDump) GetCrcString() string            { return "cdaf8ccb" }
func (*NshEntryDump) GetMessageType() api.MessageType { return api.RequestMessage }

// NshMapDetails represents VPP binary API message 'nsh_map_details'.
type NshMapDetails struct {
	MapIndex     uint32
	NspNsi       uint32
	MappedNspNsi uint32
	NshAction    uint32
	SwIfIndex    InterfaceIndex
	RxSwIfIndex  InterfaceIndex
	NextNode     uint32
}

func (m *NshMapDetails) Reset()                        { *m = NshMapDetails{} }
func (*NshMapDetails) GetMessageName() string          { return "nsh_map_details" }
func (*NshMapDetails) GetCrcString() string            { return "b34ac8a1" }
func (*NshMapDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// NshMapDump represents VPP binary API message 'nsh_map_dump'.
type NshMapDump struct {
	MapIndex uint32
}

func (m *NshMapDump) Reset()                        { *m = NshMapDump{} }
func (*NshMapDump) GetMessageName() string          { return "nsh_map_dump" }
func (*NshMapDump) GetCrcString() string            { return "8fc06b82" }
func (*NshMapDump) GetMessageType() api.MessageType { return api.RequestMessage }

func init() {
	api.RegisterMessage((*NshAddDelEntry)(nil), "nsh.NshAddDelEntry")
	api.RegisterMessage((*NshAddDelEntryReply)(nil), "nsh.NshAddDelEntryReply")
	api.RegisterMessage((*NshAddDelMap)(nil), "nsh.NshAddDelMap")
	api.RegisterMessage((*NshAddDelMapReply)(nil), "nsh.NshAddDelMapReply")
	api.RegisterMessage((*NshEntryDetails)(nil), "nsh.NshEntryDetails")
	api.RegisterMessage((*NshEntryDump)(nil), "nsh.NshEntryDump")
	api.RegisterMessage((*NshMapDetails)(nil), "nsh.NshMapDetails")
	api.RegisterMessage((*NshMapDump)(nil), "nsh.NshMapDump")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*NshAddDelEntry)(nil),
		(*NshAddDelEntryReply)(nil),
		(*NshAddDelMap)(nil),
		(*NshAddDelMapReply)(nil),
		(*NshEntryDetails)(nil),
		(*NshEntryDump)(nil),
		(*NshMapDetails)(nil),
		(*NshMapDump)(nil),
	}
}

// RPCService represents RPC service API for nsh module.
type RPCService interface {
	DumpNshEntry(ctx context.Context, in *NshEntryDump) (RPCService_DumpNshEntryClient, error)
	DumpNshMap(ctx context.Context, in *NshMapDump) (RPCService_DumpNshMapClient, error)
	NshAddDelEntry(ctx context.Context, in *NshAddDelEntry) (*NshAddDelEntryReply, error)
	NshAddDelMap(ctx context.Context, in *NshAddDelMap) (*NshAddDelMapReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpNshEntry(ctx context.Context, in *NshEntryDump) (RPCService_DumpNshEntryClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpNshEntryClient{stream}
	return x, nil
}

type RPCService_DumpNshEntryClient interface {
	Recv() (*NshEntryDetails, error)
}

type serviceClient_DumpNshEntryClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpNshEntryClient) Recv() (*NshEntryDetails, error) {
	m := new(NshEntryDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpNshMap(ctx context.Context, in *NshMapDump) (RPCService_DumpNshMapClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpNshMapClient{stream}
	return x, nil
}

type RPCService_DumpNshMapClient interface {
	Recv() (*NshMapDetails, error)
}

type serviceClient_DumpNshMapClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpNshMapClient) Recv() (*NshMapDetails, error) {
	m := new(NshMapDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) NshAddDelEntry(ctx context.Context, in *NshAddDelEntry) (*NshAddDelEntryReply, error) {
	out := new(NshAddDelEntryReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) NshAddDelMap(ctx context.Context, in *NshAddDelMap) (*NshAddDelMapReply, error) {
	out := new(NshAddDelMapReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
