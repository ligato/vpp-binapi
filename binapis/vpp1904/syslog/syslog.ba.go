// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/vpp1904/.vppapi/core/syslog.api.json

/*
Package syslog is a generated VPP binary API for 'syslog' module.

It consists of:
	  2 enums
	  2 aliases
	  5 types
	  1 union
	  8 messages
	  4 services
*/
package syslog

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "syslog"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x279f38d5
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint32

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint32]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint32{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SyslogSeverity represents VPP binary API enum 'syslog_severity'.
type SyslogSeverity uint32

const (
	SYSLOG_API_SEVERITY_EMERG  SyslogSeverity = 0
	SYSLOG_API_SEVERITY_ALERT  SyslogSeverity = 1
	SYSLOG_API_SEVERITY_CRIT   SyslogSeverity = 2
	SYSLOG_API_SEVERITY_ERR    SyslogSeverity = 3
	SYSLOG_API_SEVERITY_WARN   SyslogSeverity = 4
	SYSLOG_API_SEVERITY_NOTICE SyslogSeverity = 5
	SYSLOG_API_SEVERITY_INFO   SyslogSeverity = 6
	SYSLOG_API_SEVERITY_DBG    SyslogSeverity = 7
)

var SyslogSeverity_name = map[uint32]string{
	0: "SYSLOG_API_SEVERITY_EMERG",
	1: "SYSLOG_API_SEVERITY_ALERT",
	2: "SYSLOG_API_SEVERITY_CRIT",
	3: "SYSLOG_API_SEVERITY_ERR",
	4: "SYSLOG_API_SEVERITY_WARN",
	5: "SYSLOG_API_SEVERITY_NOTICE",
	6: "SYSLOG_API_SEVERITY_INFO",
	7: "SYSLOG_API_SEVERITY_DBG",
}

var SyslogSeverity_value = map[string]uint32{
	"SYSLOG_API_SEVERITY_EMERG":  0,
	"SYSLOG_API_SEVERITY_ALERT":  1,
	"SYSLOG_API_SEVERITY_CRIT":   2,
	"SYSLOG_API_SEVERITY_ERR":    3,
	"SYSLOG_API_SEVERITY_WARN":   4,
	"SYSLOG_API_SEVERITY_NOTICE": 5,
	"SYSLOG_API_SEVERITY_INFO":   6,
	"SYSLOG_API_SEVERITY_DBG":    7,
}

func (x SyslogSeverity) String() string {
	s, ok := SyslogSeverity_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string  { return "address" }
func (*Address) GetCrcString() string { return "09f11671" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Prefix IP4Address
	Len    uint8
}

func (*IP4Prefix) GetTypeName() string  { return "ip4_prefix" }
func (*IP4Prefix) GetCrcString() string { return "ea8dc11d" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Prefix IP6Address
	Len    uint8
}

func (*IP6Prefix) GetTypeName() string  { return "ip6_prefix" }
func (*IP6Prefix) GetCrcString() string { return "779fd64f" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string  { return "mprefix" }
func (*Mprefix) GetCrcString() string { return "1c4cba05" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address       Address
	AddressLength uint8
}

func (*Prefix) GetTypeName() string  { return "prefix" }
func (*Prefix) GetCrcString() string { return "0403aebc" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string  { return "address_union" }
func (*AddressUnion) GetCrcString() string { return "d68a2fb4" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// SyslogGetFilter represents VPP binary API message 'syslog_get_filter'.
type SyslogGetFilter struct{}

func (m *SyslogGetFilter) Reset()                        { *m = SyslogGetFilter{} }
func (*SyslogGetFilter) GetMessageName() string          { return "syslog_get_filter" }
func (*SyslogGetFilter) GetCrcString() string            { return "51077d14" }
func (*SyslogGetFilter) GetMessageType() api.MessageType { return api.RequestMessage }

// SyslogGetFilterReply represents VPP binary API message 'syslog_get_filter_reply'.
type SyslogGetFilterReply struct {
	Retval   int32
	Severity SyslogSeverity
}

func (m *SyslogGetFilterReply) Reset()                        { *m = SyslogGetFilterReply{} }
func (*SyslogGetFilterReply) GetMessageName() string          { return "syslog_get_filter_reply" }
func (*SyslogGetFilterReply) GetCrcString() string            { return "529a4e3c" }
func (*SyslogGetFilterReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SyslogGetSender represents VPP binary API message 'syslog_get_sender'.
type SyslogGetSender struct{}

func (m *SyslogGetSender) Reset()                        { *m = SyslogGetSender{} }
func (*SyslogGetSender) GetMessageName() string          { return "syslog_get_sender" }
func (*SyslogGetSender) GetCrcString() string            { return "51077d14" }
func (*SyslogGetSender) GetMessageType() api.MessageType { return api.RequestMessage }

// SyslogGetSenderReply represents VPP binary API message 'syslog_get_sender_reply'.
type SyslogGetSenderReply struct {
	Retval           int32
	SrcAddress       IP4Address
	CollectorAddress IP4Address
	CollectorPort    uint16
	VrfID            uint32
	MaxMsgSize       uint32
}

func (m *SyslogGetSenderReply) Reset()                        { *m = SyslogGetSenderReply{} }
func (*SyslogGetSenderReply) GetMessageName() string          { return "syslog_get_sender_reply" }
func (*SyslogGetSenderReply) GetCrcString() string            { return "47af60ff" }
func (*SyslogGetSenderReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SyslogSetFilter represents VPP binary API message 'syslog_set_filter'.
type SyslogSetFilter struct {
	Severity SyslogSeverity
}

func (m *SyslogSetFilter) Reset()                        { *m = SyslogSetFilter{} }
func (*SyslogSetFilter) GetMessageName() string          { return "syslog_set_filter" }
func (*SyslogSetFilter) GetCrcString() string            { return "6b786eff" }
func (*SyslogSetFilter) GetMessageType() api.MessageType { return api.RequestMessage }

// SyslogSetFilterReply represents VPP binary API message 'syslog_set_filter_reply'.
type SyslogSetFilterReply struct {
	Retval int32
}

func (m *SyslogSetFilterReply) Reset()                        { *m = SyslogSetFilterReply{} }
func (*SyslogSetFilterReply) GetMessageName() string          { return "syslog_set_filter_reply" }
func (*SyslogSetFilterReply) GetCrcString() string            { return "e8d4e804" }
func (*SyslogSetFilterReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SyslogSetSender represents VPP binary API message 'syslog_set_sender'.
type SyslogSetSender struct {
	SrcAddress       IP4Address
	CollectorAddress IP4Address
	CollectorPort    uint16
	VrfID            uint32
	MaxMsgSize       uint32
}

func (m *SyslogSetSender) Reset()                        { *m = SyslogSetSender{} }
func (*SyslogSetSender) GetMessageName() string          { return "syslog_set_sender" }
func (*SyslogSetSender) GetCrcString() string            { return "80126be2" }
func (*SyslogSetSender) GetMessageType() api.MessageType { return api.RequestMessage }

// SyslogSetSenderReply represents VPP binary API message 'syslog_set_sender_reply'.
type SyslogSetSenderReply struct {
	Retval int32
}

func (m *SyslogSetSenderReply) Reset()                        { *m = SyslogSetSenderReply{} }
func (*SyslogSetSenderReply) GetMessageName() string          { return "syslog_set_sender_reply" }
func (*SyslogSetSenderReply) GetCrcString() string            { return "e8d4e804" }
func (*SyslogSetSenderReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*SyslogGetFilter)(nil), "syslog.SyslogGetFilter")
	api.RegisterMessage((*SyslogGetFilterReply)(nil), "syslog.SyslogGetFilterReply")
	api.RegisterMessage((*SyslogGetSender)(nil), "syslog.SyslogGetSender")
	api.RegisterMessage((*SyslogGetSenderReply)(nil), "syslog.SyslogGetSenderReply")
	api.RegisterMessage((*SyslogSetFilter)(nil), "syslog.SyslogSetFilter")
	api.RegisterMessage((*SyslogSetFilterReply)(nil), "syslog.SyslogSetFilterReply")
	api.RegisterMessage((*SyslogSetSender)(nil), "syslog.SyslogSetSender")
	api.RegisterMessage((*SyslogSetSenderReply)(nil), "syslog.SyslogSetSenderReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*SyslogGetFilter)(nil),
		(*SyslogGetFilterReply)(nil),
		(*SyslogGetSender)(nil),
		(*SyslogGetSenderReply)(nil),
		(*SyslogSetFilter)(nil),
		(*SyslogSetFilterReply)(nil),
		(*SyslogSetSender)(nil),
		(*SyslogSetSenderReply)(nil),
	}
}

// RPCService represents RPC service API for syslog module.
type RPCService interface {
	SyslogGetFilter(ctx context.Context, in *SyslogGetFilter) (*SyslogGetFilterReply, error)
	SyslogGetSender(ctx context.Context, in *SyslogGetSender) (*SyslogGetSenderReply, error)
	SyslogSetFilter(ctx context.Context, in *SyslogSetFilter) (*SyslogSetFilterReply, error)
	SyslogSetSender(ctx context.Context, in *SyslogSetSender) (*SyslogSetSenderReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) SyslogGetFilter(ctx context.Context, in *SyslogGetFilter) (*SyslogGetFilterReply, error) {
	out := new(SyslogGetFilterReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SyslogGetSender(ctx context.Context, in *SyslogGetSender) (*SyslogGetSenderReply, error) {
	out := new(SyslogGetSenderReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SyslogSetFilter(ctx context.Context, in *SyslogSetFilter) (*SyslogSetFilterReply, error) {
	out := new(SyslogSetFilterReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SyslogSetSender(ctx context.Context, in *SyslogSetSender) (*SyslogSetSenderReply, error) {
	out := new(SyslogSetSenderReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
