// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/vpp1904/.vppapi/plugins/nsim.api.json

/*
Package nsim is a generated VPP binary API for 'nsim' module.

It consists of:
	  4 messages
	  2 services
*/
package nsim

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "nsim"
	// APIVersion is the API version of this module.
	APIVersion = "1.1.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x40628889
)

// NsimConfigure represents VPP binary API message 'nsim_configure'.
type NsimConfigure struct {
	DelayInUsec              uint32
	AveragePacketSize        uint32
	BandwidthInBitsPerSecond uint64
	PacketsPerDrop           uint32
}

func (m *NsimConfigure) Reset()                        { *m = NsimConfigure{} }
func (*NsimConfigure) GetMessageName() string          { return "nsim_configure" }
func (*NsimConfigure) GetCrcString() string            { return "16ed400f" }
func (*NsimConfigure) GetMessageType() api.MessageType { return api.RequestMessage }

// NsimConfigureReply represents VPP binary API message 'nsim_configure_reply'.
type NsimConfigureReply struct {
	Retval int32
}

func (m *NsimConfigureReply) Reset()                        { *m = NsimConfigureReply{} }
func (*NsimConfigureReply) GetMessageName() string          { return "nsim_configure_reply" }
func (*NsimConfigureReply) GetCrcString() string            { return "e8d4e804" }
func (*NsimConfigureReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// NsimEnableDisable represents VPP binary API message 'nsim_enable_disable'.
type NsimEnableDisable struct {
	EnableDisable uint8
	SwIfIndex0    uint32
	SwIfIndex1    uint32
}

func (m *NsimEnableDisable) Reset()                        { *m = NsimEnableDisable{} }
func (*NsimEnableDisable) GetMessageName() string          { return "nsim_enable_disable" }
func (*NsimEnableDisable) GetCrcString() string            { return "df4e7ba9" }
func (*NsimEnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// NsimEnableDisableReply represents VPP binary API message 'nsim_enable_disable_reply'.
type NsimEnableDisableReply struct {
	Retval int32
}

func (m *NsimEnableDisableReply) Reset()                        { *m = NsimEnableDisableReply{} }
func (*NsimEnableDisableReply) GetMessageName() string          { return "nsim_enable_disable_reply" }
func (*NsimEnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*NsimEnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*NsimConfigure)(nil), "nsim.NsimConfigure")
	api.RegisterMessage((*NsimConfigureReply)(nil), "nsim.NsimConfigureReply")
	api.RegisterMessage((*NsimEnableDisable)(nil), "nsim.NsimEnableDisable")
	api.RegisterMessage((*NsimEnableDisableReply)(nil), "nsim.NsimEnableDisableReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*NsimConfigure)(nil),
		(*NsimConfigureReply)(nil),
		(*NsimEnableDisable)(nil),
		(*NsimEnableDisableReply)(nil),
	}
}

// RPCService represents RPC service API for nsim module.
type RPCService interface {
	NsimConfigure(ctx context.Context, in *NsimConfigure) (*NsimConfigureReply, error)
	NsimEnableDisable(ctx context.Context, in *NsimEnableDisable) (*NsimEnableDisableReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) NsimConfigure(ctx context.Context, in *NsimConfigure) (*NsimConfigureReply, error) {
	out := new(NsimConfigureReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) NsimEnableDisable(ctx context.Context, in *NsimEnableDisable) (*NsimEnableDisableReply, error) {
	out := new(NsimEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
