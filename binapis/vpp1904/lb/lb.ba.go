// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/vpp1904/.vppapi/plugins/lb.api.json

/*
Package lb is a generated VPP binary API for 'lb' module.

It consists of:
	  1 enum
	  2 aliases
	  5 types
	  1 union
	  8 messages
	  4 services
*/
package lb

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "lb"
	// APIVersion is the API version of this module.
	APIVersion = "1.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xfb2a696e
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint32

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint32]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint32{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string  { return "address" }
func (*Address) GetCrcString() string { return "09f11671" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Prefix IP4Address
	Len    uint8
}

func (*IP4Prefix) GetTypeName() string  { return "ip4_prefix" }
func (*IP4Prefix) GetCrcString() string { return "ea8dc11d" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Prefix IP6Address
	Len    uint8
}

func (*IP6Prefix) GetTypeName() string  { return "ip6_prefix" }
func (*IP6Prefix) GetCrcString() string { return "779fd64f" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string  { return "mprefix" }
func (*Mprefix) GetCrcString() string { return "1c4cba05" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address       Address
	AddressLength uint8
}

func (*Prefix) GetTypeName() string  { return "prefix" }
func (*Prefix) GetCrcString() string { return "0403aebc" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string  { return "address_union" }
func (*AddressUnion) GetCrcString() string { return "d68a2fb4" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// LbAddDelAs represents VPP binary API message 'lb_add_del_as'.
type LbAddDelAs struct {
	VipIPPrefix     []byte `struc:"[16]byte"`
	VipPrefixLength uint8
	Protocol        uint8
	Port            uint16
	AsAddress       []byte `struc:"[16]byte"`
	IsDel           uint8
	IsFlush         uint8
}

func (m *LbAddDelAs) Reset()                        { *m = LbAddDelAs{} }
func (*LbAddDelAs) GetMessageName() string          { return "lb_add_del_as" }
func (*LbAddDelAs) GetCrcString() string            { return "b2252622" }
func (*LbAddDelAs) GetMessageType() api.MessageType { return api.RequestMessage }

// LbAddDelAsReply represents VPP binary API message 'lb_add_del_as_reply'.
type LbAddDelAsReply struct {
	Retval int32
}

func (m *LbAddDelAsReply) Reset()                        { *m = LbAddDelAsReply{} }
func (*LbAddDelAsReply) GetMessageName() string          { return "lb_add_del_as_reply" }
func (*LbAddDelAsReply) GetCrcString() string            { return "e8d4e804" }
func (*LbAddDelAsReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LbAddDelVip represents VPP binary API message 'lb_add_del_vip'.
type LbAddDelVip struct {
	IPPrefix            []byte `struc:"[16]byte"`
	PrefixLength        uint8
	Protocol            uint8
	Port                uint16
	Encap               uint8
	Dscp                uint8
	Type                uint8
	TargetPort          uint16
	NodePort            uint16
	NewFlowsTableLength uint32
	IsDel               uint8
}

func (m *LbAddDelVip) Reset()                        { *m = LbAddDelVip{} }
func (*LbAddDelVip) GetMessageName() string          { return "lb_add_del_vip" }
func (*LbAddDelVip) GetCrcString() string            { return "d67d5a49" }
func (*LbAddDelVip) GetMessageType() api.MessageType { return api.RequestMessage }

// LbAddDelVipReply represents VPP binary API message 'lb_add_del_vip_reply'.
type LbAddDelVipReply struct {
	Retval int32
}

func (m *LbAddDelVipReply) Reset()                        { *m = LbAddDelVipReply{} }
func (*LbAddDelVipReply) GetMessageName() string          { return "lb_add_del_vip_reply" }
func (*LbAddDelVipReply) GetCrcString() string            { return "e8d4e804" }
func (*LbAddDelVipReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LbConf represents VPP binary API message 'lb_conf'.
type LbConf struct {
	IP4SrcAddress        IP4Address
	IP6SrcAddress        IP6Address
	StickyBucketsPerCore uint32
	FlowTimeout          uint32
}

func (m *LbConf) Reset()                        { *m = LbConf{} }
func (*LbConf) GetMessageName() string          { return "lb_conf" }
func (*LbConf) GetCrcString() string            { return "a48c4a98" }
func (*LbConf) GetMessageType() api.MessageType { return api.RequestMessage }

// LbConfReply represents VPP binary API message 'lb_conf_reply'.
type LbConfReply struct {
	Retval int32
}

func (m *LbConfReply) Reset()                        { *m = LbConfReply{} }
func (*LbConfReply) GetMessageName() string          { return "lb_conf_reply" }
func (*LbConfReply) GetCrcString() string            { return "e8d4e804" }
func (*LbConfReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LbFlushVip represents VPP binary API message 'lb_flush_vip'.
type LbFlushVip struct {
	IPPrefix     []byte `struc:"[16]byte"`
	PrefixLength uint8
	Protocol     uint8
	Port         uint16
}

func (m *LbFlushVip) Reset()                        { *m = LbFlushVip{} }
func (*LbFlushVip) GetMessageName() string          { return "lb_flush_vip" }
func (*LbFlushVip) GetCrcString() string            { return "21d6df07" }
func (*LbFlushVip) GetMessageType() api.MessageType { return api.RequestMessage }

// LbFlushVipReply represents VPP binary API message 'lb_flush_vip_reply'.
type LbFlushVipReply struct {
	Retval int32
}

func (m *LbFlushVipReply) Reset()                        { *m = LbFlushVipReply{} }
func (*LbFlushVipReply) GetMessageName() string          { return "lb_flush_vip_reply" }
func (*LbFlushVipReply) GetCrcString() string            { return "e8d4e804" }
func (*LbFlushVipReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*LbAddDelAs)(nil), "lb.LbAddDelAs")
	api.RegisterMessage((*LbAddDelAsReply)(nil), "lb.LbAddDelAsReply")
	api.RegisterMessage((*LbAddDelVip)(nil), "lb.LbAddDelVip")
	api.RegisterMessage((*LbAddDelVipReply)(nil), "lb.LbAddDelVipReply")
	api.RegisterMessage((*LbConf)(nil), "lb.LbConf")
	api.RegisterMessage((*LbConfReply)(nil), "lb.LbConfReply")
	api.RegisterMessage((*LbFlushVip)(nil), "lb.LbFlushVip")
	api.RegisterMessage((*LbFlushVipReply)(nil), "lb.LbFlushVipReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*LbAddDelAs)(nil),
		(*LbAddDelAsReply)(nil),
		(*LbAddDelVip)(nil),
		(*LbAddDelVipReply)(nil),
		(*LbConf)(nil),
		(*LbConfReply)(nil),
		(*LbFlushVip)(nil),
		(*LbFlushVipReply)(nil),
	}
}

// RPCService represents RPC service API for lb module.
type RPCService interface {
	LbAddDelAs(ctx context.Context, in *LbAddDelAs) (*LbAddDelAsReply, error)
	LbAddDelVip(ctx context.Context, in *LbAddDelVip) (*LbAddDelVipReply, error)
	LbConf(ctx context.Context, in *LbConf) (*LbConfReply, error)
	LbFlushVip(ctx context.Context, in *LbFlushVip) (*LbFlushVipReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) LbAddDelAs(ctx context.Context, in *LbAddDelAs) (*LbAddDelAsReply, error) {
	out := new(LbAddDelAsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LbAddDelVip(ctx context.Context, in *LbAddDelVip) (*LbAddDelVipReply, error) {
	out := new(LbAddDelVipReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LbConf(ctx context.Context, in *LbConf) (*LbConfReply, error) {
	out := new(LbConfReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LbFlushVip(ctx context.Context, in *LbFlushVip) (*LbFlushVipReply, error) {
	out := new(LbFlushVipReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
