// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/vpp2005/.vppapi/core/lisp_gpe.api.json

/*
Package lisp_gpe is a generated VPP binary API for 'lisp_gpe' module.

It consists of:
	 12 enums
	  7 aliases
	 14 types
	  2 unions
	 20 messages
	 10 services
*/
package lisp_gpe

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "lisp_gpe"
	// APIVersion is the API version of this module.
	APIVersion = "2.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x4947ac96
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint8

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint8]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint8{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// EidType represents VPP binary API enum 'eid_type'.
type EidType uint8

const (
	EID_TYPE_API_PREFIX EidType = 0
	EID_TYPE_API_MAC    EidType = 1
	EID_TYPE_API_NSH    EidType = 2
)

var EidType_name = map[uint8]string{
	0: "EID_TYPE_API_PREFIX",
	1: "EID_TYPE_API_MAC",
	2: "EID_TYPE_API_NSH",
}

var EidType_value = map[string]uint8{
	"EID_TYPE_API_PREFIX": 0,
	"EID_TYPE_API_MAC":    1,
	"EID_TYPE_API_NSH":    2,
}

func (x EidType) String() string {
	s, ok := EidType_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// HmacKeyID represents VPP binary API enum 'hmac_key_id'.
type HmacKeyID uint8

const (
	KEY_ID_API_HMAC_NO_KEY      HmacKeyID = 0
	KEY_ID_API_HMAC_SHA_1_96    HmacKeyID = 1
	KEY_ID_API_HMAC_SHA_256_128 HmacKeyID = 2
)

var HmacKeyID_name = map[uint8]string{
	0: "KEY_ID_API_HMAC_NO_KEY",
	1: "KEY_ID_API_HMAC_SHA_1_96",
	2: "KEY_ID_API_HMAC_SHA_256_128",
}

var HmacKeyID_value = map[string]uint8{
	"KEY_ID_API_HMAC_NO_KEY":      0,
	"KEY_ID_API_HMAC_SHA_1_96":    1,
	"KEY_ID_API_HMAC_SHA_256_128": 2,
}

func (x HmacKeyID) String() string {
	s, ok := HmacKeyID_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 0
	IF_API_TYPE_SUB      IfType = 1
	IF_API_TYPE_P2P      IfType = 2
	IF_API_TYPE_PIPE     IfType = 3
)

var IfType_name = map[uint32]string{
	0: "IF_API_TYPE_HARDWARE",
	1: "IF_API_TYPE_SUB",
	2: "IF_API_TYPE_P2P",
	3: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 0,
	"IF_API_TYPE_SUB":      1,
	"IF_API_TYPE_P2P":      2,
	"IF_API_TYPE_PIPE":     3,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint8

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_ESP      IPProto = 50
	IP_API_PROTO_AH       IPProto = 51
	IP_API_PROTO_ICMP6    IPProto = 58
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint8]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_ESP",
	51:  "IP_API_PROTO_AH",
	58:  "IP_API_PROTO_ICMP6",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint8{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_ESP":      50,
	"IP_API_PROTO_AH":       51,
	"IP_API_PROTO_ICMP6":    58,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 0
	MTU_PROTO_API_IP4  MtuProto = 1
	MTU_PROTO_API_IP6  MtuProto = 2
	MTU_PROTO_API_MPLS MtuProto = 3
)

var MtuProto_name = map[uint32]string{
	0: "MTU_PROTO_API_L3",
	1: "MTU_PROTO_API_IP4",
	2: "MTU_PROTO_API_IP6",
	3: "MTU_PROTO_API_MPLS",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   0,
	"MTU_PROTO_API_IP4":  1,
	"MTU_PROTO_API_IP6":  2,
	"MTU_PROTO_API_MPLS": 3,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// AddressWithPrefix represents VPP binary API alias 'address_with_prefix'.
type AddressWithPrefix Prefix

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP4AddressWithPrefix represents VPP binary API alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// IP6AddressWithPrefix represents VPP binary API alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// MacAddress represents VPP binary API alias 'mac_address'.
type MacAddress [6]uint8

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string { return "address" }

// Eid represents VPP binary API type 'eid'.
type Eid struct {
	Type    EidType
	Address EidAddress
}

func (*Eid) GetTypeName() string { return "eid" }

// GpeFwdEntry represents VPP binary API type 'gpe_fwd_entry'.
type GpeFwdEntry struct {
	FwdEntryIndex uint32
	DpTable       uint32
	Leid          Eid
	Reid          Eid
	Vni           uint32
	Action        uint8
}

func (*GpeFwdEntry) GetTypeName() string { return "gpe_fwd_entry" }

// GpeLocator represents VPP binary API type 'gpe_locator'.
type GpeLocator struct {
	Weight uint8
	Addr   Address
}

func (*GpeLocator) GetTypeName() string { return "gpe_locator" }

// GpeNativeFwdRpath represents VPP binary API type 'gpe_native_fwd_rpath'.
type GpeNativeFwdRpath struct {
	FibIndex    uint32
	NhSwIfIndex InterfaceIndex
	NhAddr      Address
}

func (*GpeNativeFwdRpath) GetTypeName() string { return "gpe_native_fwd_rpath" }

// HmacKey represents VPP binary API type 'hmac_key'.
type HmacKey struct {
	ID  HmacKeyID
	Key []byte `struc:"[64]byte"`
}

func (*HmacKey) GetTypeName() string { return "hmac_key" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string { return "ip4_prefix" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string { return "ip6_prefix" }

// LocalLocator represents VPP binary API type 'local_locator'.
type LocalLocator struct {
	SwIfIndex InterfaceIndex
	Priority  uint8
	Weight    uint8
}

func (*LocalLocator) GetTypeName() string { return "local_locator" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string { return "mprefix" }

// Nsh represents VPP binary API type 'nsh'.
type Nsh struct {
	Spi uint32
	Si  uint8
}

func (*Nsh) GetTypeName() string { return "nsh" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string { return "prefix" }

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string { return "prefix_matcher" }

// RemoteLocator represents VPP binary API type 'remote_locator'.
type RemoteLocator struct {
	Priority  uint8
	Weight    uint8
	IPAddress Address
}

func (*RemoteLocator) GetTypeName() string { return "remote_locator" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string { return "address_union" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// EidAddress represents VPP binary API union 'eid_address'.
type EidAddress struct {
	XXX_UnionData [6]byte
}

func (*EidAddress) GetTypeName() string { return "eid_address" }

func EidAddressPrefix(a Prefix) (u EidAddress) {
	u.SetPrefix(a)
	return
}
func (u *EidAddress) SetPrefix(a Prefix) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *EidAddress) GetPrefix() (a Prefix) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func EidAddressMac(a MacAddress) (u EidAddress) {
	u.SetMac(a)
	return
}
func (u *EidAddress) SetMac(a MacAddress) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *EidAddress) GetMac() (a MacAddress) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func EidAddressNsh(a Nsh) (u EidAddress) {
	u.SetNsh(a)
	return
}
func (u *EidAddress) SetNsh(a Nsh) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *EidAddress) GetNsh() (a Nsh) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// GpeAddDelFwdEntry represents VPP binary API message 'gpe_add_del_fwd_entry'.
type GpeAddDelFwdEntry struct {
	IsAdd   bool
	RmtEid  Eid
	LclEid  Eid
	Vni     uint32
	DpTable uint32
	Action  uint8
	LocNum  uint32 `struc:"sizeof=Locs"`
	Locs    []GpeLocator
}

func (m *GpeAddDelFwdEntry) Reset()                        { *m = GpeAddDelFwdEntry{} }
func (*GpeAddDelFwdEntry) GetMessageName() string          { return "gpe_add_del_fwd_entry" }
func (*GpeAddDelFwdEntry) GetCrcString() string            { return "de6df50f" }
func (*GpeAddDelFwdEntry) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeAddDelFwdEntryReply represents VPP binary API message 'gpe_add_del_fwd_entry_reply'.
type GpeAddDelFwdEntryReply struct {
	Retval        int32
	FwdEntryIndex uint32
}

func (m *GpeAddDelFwdEntryReply) Reset()                        { *m = GpeAddDelFwdEntryReply{} }
func (*GpeAddDelFwdEntryReply) GetMessageName() string          { return "gpe_add_del_fwd_entry_reply" }
func (*GpeAddDelFwdEntryReply) GetCrcString() string            { return "efe5f176" }
func (*GpeAddDelFwdEntryReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// GpeAddDelIface represents VPP binary API message 'gpe_add_del_iface'.
type GpeAddDelIface struct {
	IsAdd   bool
	IsL2    bool
	DpTable uint32
	Vni     uint32
}

func (m *GpeAddDelIface) Reset()                        { *m = GpeAddDelIface{} }
func (*GpeAddDelIface) GetMessageName() string          { return "gpe_add_del_iface" }
func (*GpeAddDelIface) GetCrcString() string            { return "3ccff273" }
func (*GpeAddDelIface) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeAddDelIfaceReply represents VPP binary API message 'gpe_add_del_iface_reply'.
type GpeAddDelIfaceReply struct {
	Retval int32
}

func (m *GpeAddDelIfaceReply) Reset()                        { *m = GpeAddDelIfaceReply{} }
func (*GpeAddDelIfaceReply) GetMessageName() string          { return "gpe_add_del_iface_reply" }
func (*GpeAddDelIfaceReply) GetCrcString() string            { return "e8d4e804" }
func (*GpeAddDelIfaceReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// GpeAddDelNativeFwdRpath represents VPP binary API message 'gpe_add_del_native_fwd_rpath'.
type GpeAddDelNativeFwdRpath struct {
	IsAdd       bool
	TableID     uint32
	NhSwIfIndex InterfaceIndex
	NhAddr      Address
}

func (m *GpeAddDelNativeFwdRpath) Reset()                        { *m = GpeAddDelNativeFwdRpath{} }
func (*GpeAddDelNativeFwdRpath) GetMessageName() string          { return "gpe_add_del_native_fwd_rpath" }
func (*GpeAddDelNativeFwdRpath) GetCrcString() string            { return "812da2f2" }
func (*GpeAddDelNativeFwdRpath) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeAddDelNativeFwdRpathReply represents VPP binary API message 'gpe_add_del_native_fwd_rpath_reply'.
type GpeAddDelNativeFwdRpathReply struct {
	Retval int32
}

func (m *GpeAddDelNativeFwdRpathReply) Reset() { *m = GpeAddDelNativeFwdRpathReply{} }
func (*GpeAddDelNativeFwdRpathReply) GetMessageName() string {
	return "gpe_add_del_native_fwd_rpath_reply"
}
func (*GpeAddDelNativeFwdRpathReply) GetCrcString() string            { return "e8d4e804" }
func (*GpeAddDelNativeFwdRpathReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// GpeEnableDisable represents VPP binary API message 'gpe_enable_disable'.
type GpeEnableDisable struct {
	IsEnable bool
}

func (m *GpeEnableDisable) Reset()                        { *m = GpeEnableDisable{} }
func (*GpeEnableDisable) GetMessageName() string          { return "gpe_enable_disable" }
func (*GpeEnableDisable) GetCrcString() string            { return "c264d7bf" }
func (*GpeEnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeEnableDisableReply represents VPP binary API message 'gpe_enable_disable_reply'.
type GpeEnableDisableReply struct {
	Retval int32
}

func (m *GpeEnableDisableReply) Reset()                        { *m = GpeEnableDisableReply{} }
func (*GpeEnableDisableReply) GetMessageName() string          { return "gpe_enable_disable_reply" }
func (*GpeEnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*GpeEnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// GpeFwdEntriesGet represents VPP binary API message 'gpe_fwd_entries_get'.
type GpeFwdEntriesGet struct {
	Vni uint32
}

func (m *GpeFwdEntriesGet) Reset()                        { *m = GpeFwdEntriesGet{} }
func (*GpeFwdEntriesGet) GetMessageName() string          { return "gpe_fwd_entries_get" }
func (*GpeFwdEntriesGet) GetCrcString() string            { return "8d1f2fe9" }
func (*GpeFwdEntriesGet) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeFwdEntriesGetReply represents VPP binary API message 'gpe_fwd_entries_get_reply'.
type GpeFwdEntriesGetReply struct {
	Retval  int32
	Count   uint32 `struc:"sizeof=Entries"`
	Entries []GpeFwdEntry
}

func (m *GpeFwdEntriesGetReply) Reset()                        { *m = GpeFwdEntriesGetReply{} }
func (*GpeFwdEntriesGetReply) GetMessageName() string          { return "gpe_fwd_entries_get_reply" }
func (*GpeFwdEntriesGetReply) GetCrcString() string            { return "f9f53f1b" }
func (*GpeFwdEntriesGetReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// GpeFwdEntryPathDetails represents VPP binary API message 'gpe_fwd_entry_path_details'.
type GpeFwdEntryPathDetails struct {
	LclLoc GpeLocator
	RmtLoc GpeLocator
}

func (m *GpeFwdEntryPathDetails) Reset()                        { *m = GpeFwdEntryPathDetails{} }
func (*GpeFwdEntryPathDetails) GetMessageName() string          { return "gpe_fwd_entry_path_details" }
func (*GpeFwdEntryPathDetails) GetCrcString() string            { return "ee80b19a" }
func (*GpeFwdEntryPathDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// GpeFwdEntryPathDump represents VPP binary API message 'gpe_fwd_entry_path_dump'.
type GpeFwdEntryPathDump struct {
	FwdEntryIndex uint32
}

func (m *GpeFwdEntryPathDump) Reset()                        { *m = GpeFwdEntryPathDump{} }
func (*GpeFwdEntryPathDump) GetMessageName() string          { return "gpe_fwd_entry_path_dump" }
func (*GpeFwdEntryPathDump) GetCrcString() string            { return "39bce980" }
func (*GpeFwdEntryPathDump) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeFwdEntryVnisGet represents VPP binary API message 'gpe_fwd_entry_vnis_get'.
type GpeFwdEntryVnisGet struct{}

func (m *GpeFwdEntryVnisGet) Reset()                        { *m = GpeFwdEntryVnisGet{} }
func (*GpeFwdEntryVnisGet) GetMessageName() string          { return "gpe_fwd_entry_vnis_get" }
func (*GpeFwdEntryVnisGet) GetCrcString() string            { return "51077d14" }
func (*GpeFwdEntryVnisGet) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeFwdEntryVnisGetReply represents VPP binary API message 'gpe_fwd_entry_vnis_get_reply'.
type GpeFwdEntryVnisGetReply struct {
	Retval int32
	Count  uint32 `struc:"sizeof=Vnis"`
	Vnis   []uint32
}

func (m *GpeFwdEntryVnisGetReply) Reset()                        { *m = GpeFwdEntryVnisGetReply{} }
func (*GpeFwdEntryVnisGetReply) GetMessageName() string          { return "gpe_fwd_entry_vnis_get_reply" }
func (*GpeFwdEntryVnisGetReply) GetCrcString() string            { return "aa70da20" }
func (*GpeFwdEntryVnisGetReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// GpeGetEncapMode represents VPP binary API message 'gpe_get_encap_mode'.
type GpeGetEncapMode struct{}

func (m *GpeGetEncapMode) Reset()                        { *m = GpeGetEncapMode{} }
func (*GpeGetEncapMode) GetMessageName() string          { return "gpe_get_encap_mode" }
func (*GpeGetEncapMode) GetCrcString() string            { return "51077d14" }
func (*GpeGetEncapMode) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeGetEncapModeReply represents VPP binary API message 'gpe_get_encap_mode_reply'.
type GpeGetEncapModeReply struct {
	Retval    int32
	EncapMode uint8
}

func (m *GpeGetEncapModeReply) Reset()                        { *m = GpeGetEncapModeReply{} }
func (*GpeGetEncapModeReply) GetMessageName() string          { return "gpe_get_encap_mode_reply" }
func (*GpeGetEncapModeReply) GetCrcString() string            { return "36e3f7ca" }
func (*GpeGetEncapModeReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// GpeNativeFwdRpathsGet represents VPP binary API message 'gpe_native_fwd_rpaths_get'.
type GpeNativeFwdRpathsGet struct {
	IsIP4 bool
}

func (m *GpeNativeFwdRpathsGet) Reset()                        { *m = GpeNativeFwdRpathsGet{} }
func (*GpeNativeFwdRpathsGet) GetMessageName() string          { return "gpe_native_fwd_rpaths_get" }
func (*GpeNativeFwdRpathsGet) GetCrcString() string            { return "f652ceb4" }
func (*GpeNativeFwdRpathsGet) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeNativeFwdRpathsGetReply represents VPP binary API message 'gpe_native_fwd_rpaths_get_reply'.
type GpeNativeFwdRpathsGetReply struct {
	Retval  int32
	Count   uint32 `struc:"sizeof=Entries"`
	Entries []GpeNativeFwdRpath
}

func (m *GpeNativeFwdRpathsGetReply) Reset()                        { *m = GpeNativeFwdRpathsGetReply{} }
func (*GpeNativeFwdRpathsGetReply) GetMessageName() string          { return "gpe_native_fwd_rpaths_get_reply" }
func (*GpeNativeFwdRpathsGetReply) GetCrcString() string            { return "79d54eb9" }
func (*GpeNativeFwdRpathsGetReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// GpeSetEncapMode represents VPP binary API message 'gpe_set_encap_mode'.
type GpeSetEncapMode struct {
	IsVxlan bool
}

func (m *GpeSetEncapMode) Reset()                        { *m = GpeSetEncapMode{} }
func (*GpeSetEncapMode) GetMessageName() string          { return "gpe_set_encap_mode" }
func (*GpeSetEncapMode) GetCrcString() string            { return "bd819eac" }
func (*GpeSetEncapMode) GetMessageType() api.MessageType { return api.RequestMessage }

// GpeSetEncapModeReply represents VPP binary API message 'gpe_set_encap_mode_reply'.
type GpeSetEncapModeReply struct {
	Retval int32
}

func (m *GpeSetEncapModeReply) Reset()                        { *m = GpeSetEncapModeReply{} }
func (*GpeSetEncapModeReply) GetMessageName() string          { return "gpe_set_encap_mode_reply" }
func (*GpeSetEncapModeReply) GetCrcString() string            { return "e8d4e804" }
func (*GpeSetEncapModeReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*GpeAddDelFwdEntry)(nil), "lisp_gpe.GpeAddDelFwdEntry")
	api.RegisterMessage((*GpeAddDelFwdEntryReply)(nil), "lisp_gpe.GpeAddDelFwdEntryReply")
	api.RegisterMessage((*GpeAddDelIface)(nil), "lisp_gpe.GpeAddDelIface")
	api.RegisterMessage((*GpeAddDelIfaceReply)(nil), "lisp_gpe.GpeAddDelIfaceReply")
	api.RegisterMessage((*GpeAddDelNativeFwdRpath)(nil), "lisp_gpe.GpeAddDelNativeFwdRpath")
	api.RegisterMessage((*GpeAddDelNativeFwdRpathReply)(nil), "lisp_gpe.GpeAddDelNativeFwdRpathReply")
	api.RegisterMessage((*GpeEnableDisable)(nil), "lisp_gpe.GpeEnableDisable")
	api.RegisterMessage((*GpeEnableDisableReply)(nil), "lisp_gpe.GpeEnableDisableReply")
	api.RegisterMessage((*GpeFwdEntriesGet)(nil), "lisp_gpe.GpeFwdEntriesGet")
	api.RegisterMessage((*GpeFwdEntriesGetReply)(nil), "lisp_gpe.GpeFwdEntriesGetReply")
	api.RegisterMessage((*GpeFwdEntryPathDetails)(nil), "lisp_gpe.GpeFwdEntryPathDetails")
	api.RegisterMessage((*GpeFwdEntryPathDump)(nil), "lisp_gpe.GpeFwdEntryPathDump")
	api.RegisterMessage((*GpeFwdEntryVnisGet)(nil), "lisp_gpe.GpeFwdEntryVnisGet")
	api.RegisterMessage((*GpeFwdEntryVnisGetReply)(nil), "lisp_gpe.GpeFwdEntryVnisGetReply")
	api.RegisterMessage((*GpeGetEncapMode)(nil), "lisp_gpe.GpeGetEncapMode")
	api.RegisterMessage((*GpeGetEncapModeReply)(nil), "lisp_gpe.GpeGetEncapModeReply")
	api.RegisterMessage((*GpeNativeFwdRpathsGet)(nil), "lisp_gpe.GpeNativeFwdRpathsGet")
	api.RegisterMessage((*GpeNativeFwdRpathsGetReply)(nil), "lisp_gpe.GpeNativeFwdRpathsGetReply")
	api.RegisterMessage((*GpeSetEncapMode)(nil), "lisp_gpe.GpeSetEncapMode")
	api.RegisterMessage((*GpeSetEncapModeReply)(nil), "lisp_gpe.GpeSetEncapModeReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*GpeAddDelFwdEntry)(nil),
		(*GpeAddDelFwdEntryReply)(nil),
		(*GpeAddDelIface)(nil),
		(*GpeAddDelIfaceReply)(nil),
		(*GpeAddDelNativeFwdRpath)(nil),
		(*GpeAddDelNativeFwdRpathReply)(nil),
		(*GpeEnableDisable)(nil),
		(*GpeEnableDisableReply)(nil),
		(*GpeFwdEntriesGet)(nil),
		(*GpeFwdEntriesGetReply)(nil),
		(*GpeFwdEntryPathDetails)(nil),
		(*GpeFwdEntryPathDump)(nil),
		(*GpeFwdEntryVnisGet)(nil),
		(*GpeFwdEntryVnisGetReply)(nil),
		(*GpeGetEncapMode)(nil),
		(*GpeGetEncapModeReply)(nil),
		(*GpeNativeFwdRpathsGet)(nil),
		(*GpeNativeFwdRpathsGetReply)(nil),
		(*GpeSetEncapMode)(nil),
		(*GpeSetEncapModeReply)(nil),
	}
}

// RPCService represents RPC service API for lisp_gpe module.
type RPCService interface {
	DumpGpeFwdEntryPath(ctx context.Context, in *GpeFwdEntryPathDump) (RPCService_DumpGpeFwdEntryPathClient, error)
	GpeAddDelFwdEntry(ctx context.Context, in *GpeAddDelFwdEntry) (*GpeAddDelFwdEntryReply, error)
	GpeAddDelIface(ctx context.Context, in *GpeAddDelIface) (*GpeAddDelIfaceReply, error)
	GpeAddDelNativeFwdRpath(ctx context.Context, in *GpeAddDelNativeFwdRpath) (*GpeAddDelNativeFwdRpathReply, error)
	GpeEnableDisable(ctx context.Context, in *GpeEnableDisable) (*GpeEnableDisableReply, error)
	GpeFwdEntriesGet(ctx context.Context, in *GpeFwdEntriesGet) (*GpeFwdEntriesGetReply, error)
	GpeFwdEntryVnisGet(ctx context.Context, in *GpeFwdEntryVnisGet) (*GpeFwdEntryVnisGetReply, error)
	GpeGetEncapMode(ctx context.Context, in *GpeGetEncapMode) (*GpeGetEncapModeReply, error)
	GpeNativeFwdRpathsGet(ctx context.Context, in *GpeNativeFwdRpathsGet) (*GpeNativeFwdRpathsGetReply, error)
	GpeSetEncapMode(ctx context.Context, in *GpeSetEncapMode) (*GpeSetEncapModeReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpGpeFwdEntryPath(ctx context.Context, in *GpeFwdEntryPathDump) (RPCService_DumpGpeFwdEntryPathClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpGpeFwdEntryPathClient{stream}
	return x, nil
}

type RPCService_DumpGpeFwdEntryPathClient interface {
	Recv() (*GpeFwdEntryPathDetails, error)
}

type serviceClient_DumpGpeFwdEntryPathClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpGpeFwdEntryPathClient) Recv() (*GpeFwdEntryPathDetails, error) {
	m := new(GpeFwdEntryPathDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) GpeAddDelFwdEntry(ctx context.Context, in *GpeAddDelFwdEntry) (*GpeAddDelFwdEntryReply, error) {
	out := new(GpeAddDelFwdEntryReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GpeAddDelIface(ctx context.Context, in *GpeAddDelIface) (*GpeAddDelIfaceReply, error) {
	out := new(GpeAddDelIfaceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GpeAddDelNativeFwdRpath(ctx context.Context, in *GpeAddDelNativeFwdRpath) (*GpeAddDelNativeFwdRpathReply, error) {
	out := new(GpeAddDelNativeFwdRpathReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GpeEnableDisable(ctx context.Context, in *GpeEnableDisable) (*GpeEnableDisableReply, error) {
	out := new(GpeEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GpeFwdEntriesGet(ctx context.Context, in *GpeFwdEntriesGet) (*GpeFwdEntriesGetReply, error) {
	out := new(GpeFwdEntriesGetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GpeFwdEntryVnisGet(ctx context.Context, in *GpeFwdEntryVnisGet) (*GpeFwdEntryVnisGetReply, error) {
	out := new(GpeFwdEntryVnisGetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GpeGetEncapMode(ctx context.Context, in *GpeGetEncapMode) (*GpeGetEncapModeReply, error) {
	out := new(GpeGetEncapModeReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GpeNativeFwdRpathsGet(ctx context.Context, in *GpeNativeFwdRpathsGet) (*GpeNativeFwdRpathsGetReply, error) {
	out := new(GpeNativeFwdRpathsGetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GpeSetEncapMode(ctx context.Context, in *GpeSetEncapMode) (*GpeSetEncapModeReply, error) {
	out := new(GpeSetEncapModeReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
