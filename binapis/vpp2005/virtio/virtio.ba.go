// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/vpp2005/.vppapi/core/virtio.api.json

/*
Package virtio is a generated VPP binary API for 'virtio' module.

It consists of:
	  6 enums
	  2 aliases
	  1 type
	  6 messages
	  3 services
*/
package virtio

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "virtio"
	// APIVersion is the API version of this module.
	APIVersion = "2.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x601b1fdc
)

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 0
	IF_API_TYPE_SUB      IfType = 1
	IF_API_TYPE_P2P      IfType = 2
	IF_API_TYPE_PIPE     IfType = 3
)

var IfType_name = map[uint32]string{
	0: "IF_API_TYPE_HARDWARE",
	1: "IF_API_TYPE_SUB",
	2: "IF_API_TYPE_P2P",
	3: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 0,
	"IF_API_TYPE_SUB":      1,
	"IF_API_TYPE_P2P":      2,
	"IF_API_TYPE_PIPE":     3,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 0
	MTU_PROTO_API_IP4  MtuProto = 1
	MTU_PROTO_API_IP6  MtuProto = 2
	MTU_PROTO_API_MPLS MtuProto = 3
)

var MtuProto_name = map[uint32]string{
	0: "MTU_PROTO_API_L3",
	1: "MTU_PROTO_API_IP4",
	2: "MTU_PROTO_API_IP6",
	3: "MTU_PROTO_API_MPLS",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   0,
	"MTU_PROTO_API_IP4":  1,
	"MTU_PROTO_API_IP6":  2,
	"MTU_PROTO_API_MPLS": 3,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// MacAddress represents VPP binary API alias 'mac_address'.
type MacAddress [6]uint8

// PciAddress represents VPP binary API type 'pci_address'.
type PciAddress struct {
	Domain   uint16
	Bus      uint8
	Slot     uint8
	Function uint8
}

func (*PciAddress) GetTypeName() string { return "pci_address" }

// SwInterfaceVirtioPciDetails represents VPP binary API message 'sw_interface_virtio_pci_details'.
type SwInterfaceVirtioPciDetails struct {
	SwIfIndex InterfaceIndex
	PciAddr   PciAddress
	MacAddr   MacAddress
	TxRingSz  uint16
	RxRingSz  uint16
	Features  uint64
}

func (m *SwInterfaceVirtioPciDetails) Reset()                        { *m = SwInterfaceVirtioPciDetails{} }
func (*SwInterfaceVirtioPciDetails) GetMessageName() string          { return "sw_interface_virtio_pci_details" }
func (*SwInterfaceVirtioPciDetails) GetCrcString() string            { return "16187f3a" }
func (*SwInterfaceVirtioPciDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// SwInterfaceVirtioPciDump represents VPP binary API message 'sw_interface_virtio_pci_dump'.
type SwInterfaceVirtioPciDump struct{}

func (m *SwInterfaceVirtioPciDump) Reset()                        { *m = SwInterfaceVirtioPciDump{} }
func (*SwInterfaceVirtioPciDump) GetMessageName() string          { return "sw_interface_virtio_pci_dump" }
func (*SwInterfaceVirtioPciDump) GetCrcString() string            { return "51077d14" }
func (*SwInterfaceVirtioPciDump) GetMessageType() api.MessageType { return api.RequestMessage }

// VirtioPciCreate represents VPP binary API message 'virtio_pci_create'.
type VirtioPciCreate struct {
	PciAddr                PciAddress
	UseRandomMac           bool
	MacAddress             MacAddress
	GsoEnabled             bool
	ChecksumOffloadEnabled bool
	Features               uint64
}

func (m *VirtioPciCreate) Reset()                        { *m = VirtioPciCreate{} }
func (*VirtioPciCreate) GetMessageName() string          { return "virtio_pci_create" }
func (*VirtioPciCreate) GetCrcString() string            { return "a9f1370c" }
func (*VirtioPciCreate) GetMessageType() api.MessageType { return api.RequestMessage }

// VirtioPciCreateReply represents VPP binary API message 'virtio_pci_create_reply'.
type VirtioPciCreateReply struct {
	Retval    int32
	SwIfIndex InterfaceIndex
}

func (m *VirtioPciCreateReply) Reset()                        { *m = VirtioPciCreateReply{} }
func (*VirtioPciCreateReply) GetMessageName() string          { return "virtio_pci_create_reply" }
func (*VirtioPciCreateReply) GetCrcString() string            { return "5383d31f" }
func (*VirtioPciCreateReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// VirtioPciDelete represents VPP binary API message 'virtio_pci_delete'.
type VirtioPciDelete struct {
	SwIfIndex InterfaceIndex
}

func (m *VirtioPciDelete) Reset()                        { *m = VirtioPciDelete{} }
func (*VirtioPciDelete) GetMessageName() string          { return "virtio_pci_delete" }
func (*VirtioPciDelete) GetCrcString() string            { return "f9e6675e" }
func (*VirtioPciDelete) GetMessageType() api.MessageType { return api.RequestMessage }

// VirtioPciDeleteReply represents VPP binary API message 'virtio_pci_delete_reply'.
type VirtioPciDeleteReply struct {
	Retval int32
}

func (m *VirtioPciDeleteReply) Reset()                        { *m = VirtioPciDeleteReply{} }
func (*VirtioPciDeleteReply) GetMessageName() string          { return "virtio_pci_delete_reply" }
func (*VirtioPciDeleteReply) GetCrcString() string            { return "e8d4e804" }
func (*VirtioPciDeleteReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*SwInterfaceVirtioPciDetails)(nil), "virtio.SwInterfaceVirtioPciDetails")
	api.RegisterMessage((*SwInterfaceVirtioPciDump)(nil), "virtio.SwInterfaceVirtioPciDump")
	api.RegisterMessage((*VirtioPciCreate)(nil), "virtio.VirtioPciCreate")
	api.RegisterMessage((*VirtioPciCreateReply)(nil), "virtio.VirtioPciCreateReply")
	api.RegisterMessage((*VirtioPciDelete)(nil), "virtio.VirtioPciDelete")
	api.RegisterMessage((*VirtioPciDeleteReply)(nil), "virtio.VirtioPciDeleteReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*SwInterfaceVirtioPciDetails)(nil),
		(*SwInterfaceVirtioPciDump)(nil),
		(*VirtioPciCreate)(nil),
		(*VirtioPciCreateReply)(nil),
		(*VirtioPciDelete)(nil),
		(*VirtioPciDeleteReply)(nil),
	}
}

// RPCService represents RPC service API for virtio module.
type RPCService interface {
	DumpSwInterfaceVirtioPci(ctx context.Context, in *SwInterfaceVirtioPciDump) (RPCService_DumpSwInterfaceVirtioPciClient, error)
	VirtioPciCreate(ctx context.Context, in *VirtioPciCreate) (*VirtioPciCreateReply, error)
	VirtioPciDelete(ctx context.Context, in *VirtioPciDelete) (*VirtioPciDeleteReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpSwInterfaceVirtioPci(ctx context.Context, in *SwInterfaceVirtioPciDump) (RPCService_DumpSwInterfaceVirtioPciClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSwInterfaceVirtioPciClient{stream}
	return x, nil
}

type RPCService_DumpSwInterfaceVirtioPciClient interface {
	Recv() (*SwInterfaceVirtioPciDetails, error)
}

type serviceClient_DumpSwInterfaceVirtioPciClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSwInterfaceVirtioPciClient) Recv() (*SwInterfaceVirtioPciDetails, error) {
	m := new(SwInterfaceVirtioPciDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) VirtioPciCreate(ctx context.Context, in *VirtioPciCreate) (*VirtioPciCreateReply, error) {
	out := new(VirtioPciCreateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VirtioPciDelete(ctx context.Context, in *VirtioPciDelete) (*VirtioPciDeleteReply, error) {
	out := new(VirtioPciDeleteReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
