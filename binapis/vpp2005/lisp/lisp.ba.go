// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/vpp2005/.vppapi/core/lisp.api.json

/*
Package lisp is a generated VPP binary API for 'lisp' module.

It consists of:
	 13 enums
	  7 aliases
	 12 types
	  2 unions
	 60 messages
	 30 services
*/
package lisp

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "lisp"
	// APIVersion is the API version of this module.
	APIVersion = "2.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xf2d169ad
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint8

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint8]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint8{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// EidType represents VPP binary API enum 'eid_type'.
type EidType uint8

const (
	EID_TYPE_API_PREFIX EidType = 0
	EID_TYPE_API_MAC    EidType = 1
	EID_TYPE_API_NSH    EidType = 2
)

var EidType_name = map[uint8]string{
	0: "EID_TYPE_API_PREFIX",
	1: "EID_TYPE_API_MAC",
	2: "EID_TYPE_API_NSH",
}

var EidType_value = map[string]uint8{
	"EID_TYPE_API_PREFIX": 0,
	"EID_TYPE_API_MAC":    1,
	"EID_TYPE_API_NSH":    2,
}

func (x EidType) String() string {
	s, ok := EidType_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// HmacKeyID represents VPP binary API enum 'hmac_key_id'.
type HmacKeyID uint8

const (
	KEY_ID_API_HMAC_NO_KEY      HmacKeyID = 0
	KEY_ID_API_HMAC_SHA_1_96    HmacKeyID = 1
	KEY_ID_API_HMAC_SHA_256_128 HmacKeyID = 2
)

var HmacKeyID_name = map[uint8]string{
	0: "KEY_ID_API_HMAC_NO_KEY",
	1: "KEY_ID_API_HMAC_SHA_1_96",
	2: "KEY_ID_API_HMAC_SHA_256_128",
}

var HmacKeyID_value = map[string]uint8{
	"KEY_ID_API_HMAC_NO_KEY":      0,
	"KEY_ID_API_HMAC_SHA_1_96":    1,
	"KEY_ID_API_HMAC_SHA_256_128": 2,
}

func (x HmacKeyID) String() string {
	s, ok := HmacKeyID_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 0
	IF_API_TYPE_SUB      IfType = 1
	IF_API_TYPE_P2P      IfType = 2
	IF_API_TYPE_PIPE     IfType = 3
)

var IfType_name = map[uint32]string{
	0: "IF_API_TYPE_HARDWARE",
	1: "IF_API_TYPE_SUB",
	2: "IF_API_TYPE_P2P",
	3: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 0,
	"IF_API_TYPE_SUB":      1,
	"IF_API_TYPE_P2P":      2,
	"IF_API_TYPE_PIPE":     3,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint8

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_ESP      IPProto = 50
	IP_API_PROTO_AH       IPProto = 51
	IP_API_PROTO_ICMP6    IPProto = 58
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint8]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_ESP",
	51:  "IP_API_PROTO_AH",
	58:  "IP_API_PROTO_ICMP6",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint8{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_ESP":      50,
	"IP_API_PROTO_AH":       51,
	"IP_API_PROTO_ICMP6":    58,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LispLocatorSetFilter represents VPP binary API enum 'lisp_locator_set_filter'.
type LispLocatorSetFilter uint8

const (
	LISP_LOCATOR_SET_FILTER_API_ALL    LispLocatorSetFilter = 0
	LISP_LOCATOR_SET_FILTER_API_LOCAL  LispLocatorSetFilter = 1
	LISP_LOCATOR_SET_FILTER_API_REMOTE LispLocatorSetFilter = 2
)

var LispLocatorSetFilter_name = map[uint8]string{
	0: "LISP_LOCATOR_SET_FILTER_API_ALL",
	1: "LISP_LOCATOR_SET_FILTER_API_LOCAL",
	2: "LISP_LOCATOR_SET_FILTER_API_REMOTE",
}

var LispLocatorSetFilter_value = map[string]uint8{
	"LISP_LOCATOR_SET_FILTER_API_ALL":    0,
	"LISP_LOCATOR_SET_FILTER_API_LOCAL":  1,
	"LISP_LOCATOR_SET_FILTER_API_REMOTE": 2,
}

func (x LispLocatorSetFilter) String() string {
	s, ok := LispLocatorSetFilter_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 0
	MTU_PROTO_API_IP4  MtuProto = 1
	MTU_PROTO_API_IP6  MtuProto = 2
	MTU_PROTO_API_MPLS MtuProto = 3
)

var MtuProto_name = map[uint32]string{
	0: "MTU_PROTO_API_L3",
	1: "MTU_PROTO_API_IP4",
	2: "MTU_PROTO_API_IP6",
	3: "MTU_PROTO_API_MPLS",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   0,
	"MTU_PROTO_API_IP4":  1,
	"MTU_PROTO_API_IP6":  2,
	"MTU_PROTO_API_MPLS": 3,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// AddressWithPrefix represents VPP binary API alias 'address_with_prefix'.
type AddressWithPrefix Prefix

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP4AddressWithPrefix represents VPP binary API alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// IP6AddressWithPrefix represents VPP binary API alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// MacAddress represents VPP binary API alias 'mac_address'.
type MacAddress [6]uint8

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string { return "address" }

// Eid represents VPP binary API type 'eid'.
type Eid struct {
	Type    EidType
	Address EidAddress
}

func (*Eid) GetTypeName() string { return "eid" }

// HmacKey represents VPP binary API type 'hmac_key'.
type HmacKey struct {
	ID  HmacKeyID
	Key []byte `struc:"[64]byte"`
}

func (*HmacKey) GetTypeName() string { return "hmac_key" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string { return "ip4_prefix" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string { return "ip6_prefix" }

// LispAdjacency represents VPP binary API type 'lisp_adjacency'.
type LispAdjacency struct {
	Reid Eid
	Leid Eid
}

func (*LispAdjacency) GetTypeName() string { return "lisp_adjacency" }

// LocalLocator represents VPP binary API type 'local_locator'.
type LocalLocator struct {
	SwIfIndex InterfaceIndex
	Priority  uint8
	Weight    uint8
}

func (*LocalLocator) GetTypeName() string { return "local_locator" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string { return "mprefix" }

// Nsh represents VPP binary API type 'nsh'.
type Nsh struct {
	Spi uint32
	Si  uint8
}

func (*Nsh) GetTypeName() string { return "nsh" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string { return "prefix" }

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string { return "prefix_matcher" }

// RemoteLocator represents VPP binary API type 'remote_locator'.
type RemoteLocator struct {
	Priority  uint8
	Weight    uint8
	IPAddress Address
}

func (*RemoteLocator) GetTypeName() string { return "remote_locator" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string { return "address_union" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// EidAddress represents VPP binary API union 'eid_address'.
type EidAddress struct {
	XXX_UnionData [6]byte
}

func (*EidAddress) GetTypeName() string { return "eid_address" }

func EidAddressPrefix(a Prefix) (u EidAddress) {
	u.SetPrefix(a)
	return
}
func (u *EidAddress) SetPrefix(a Prefix) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *EidAddress) GetPrefix() (a Prefix) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func EidAddressMac(a MacAddress) (u EidAddress) {
	u.SetMac(a)
	return
}
func (u *EidAddress) SetMac(a MacAddress) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *EidAddress) GetMac() (a MacAddress) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func EidAddressNsh(a Nsh) (u EidAddress) {
	u.SetNsh(a)
	return
}
func (u *EidAddress) SetNsh(a Nsh) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *EidAddress) GetNsh() (a Nsh) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// LispAddDelAdjacency represents VPP binary API message 'lisp_add_del_adjacency'.
type LispAddDelAdjacency struct {
	IsAdd bool
	Vni   uint32
	Reid  Eid
	Leid  Eid
}

func (m *LispAddDelAdjacency) Reset()                        { *m = LispAddDelAdjacency{} }
func (*LispAddDelAdjacency) GetMessageName() string          { return "lisp_add_del_adjacency" }
func (*LispAddDelAdjacency) GetCrcString() string            { return "cf5edb61" }
func (*LispAddDelAdjacency) GetMessageType() api.MessageType { return api.RequestMessage }

// LispAddDelAdjacencyReply represents VPP binary API message 'lisp_add_del_adjacency_reply'.
type LispAddDelAdjacencyReply struct {
	Retval int32
}

func (m *LispAddDelAdjacencyReply) Reset()                        { *m = LispAddDelAdjacencyReply{} }
func (*LispAddDelAdjacencyReply) GetMessageName() string          { return "lisp_add_del_adjacency_reply" }
func (*LispAddDelAdjacencyReply) GetCrcString() string            { return "e8d4e804" }
func (*LispAddDelAdjacencyReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispAddDelLocalEid represents VPP binary API message 'lisp_add_del_local_eid'.
type LispAddDelLocalEid struct {
	IsAdd          bool
	Eid            Eid
	LocatorSetName string `struc:"[64]byte"`
	Vni            uint32
	Key            HmacKey
}

func (m *LispAddDelLocalEid) Reset()                        { *m = LispAddDelLocalEid{} }
func (*LispAddDelLocalEid) GetMessageName() string          { return "lisp_add_del_local_eid" }
func (*LispAddDelLocalEid) GetCrcString() string            { return "21f573bd" }
func (*LispAddDelLocalEid) GetMessageType() api.MessageType { return api.RequestMessage }

// LispAddDelLocalEidReply represents VPP binary API message 'lisp_add_del_local_eid_reply'.
type LispAddDelLocalEidReply struct {
	Retval int32
}

func (m *LispAddDelLocalEidReply) Reset()                        { *m = LispAddDelLocalEidReply{} }
func (*LispAddDelLocalEidReply) GetMessageName() string          { return "lisp_add_del_local_eid_reply" }
func (*LispAddDelLocalEidReply) GetCrcString() string            { return "e8d4e804" }
func (*LispAddDelLocalEidReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispAddDelLocator represents VPP binary API message 'lisp_add_del_locator'.
type LispAddDelLocator struct {
	IsAdd          bool
	LocatorSetName string `struc:"[64]byte"`
	SwIfIndex      InterfaceIndex
	Priority       uint8
	Weight         uint8
}

func (m *LispAddDelLocator) Reset()                        { *m = LispAddDelLocator{} }
func (*LispAddDelLocator) GetMessageName() string          { return "lisp_add_del_locator" }
func (*LispAddDelLocator) GetCrcString() string            { return "af4d8f13" }
func (*LispAddDelLocator) GetMessageType() api.MessageType { return api.RequestMessage }

// LispAddDelLocatorReply represents VPP binary API message 'lisp_add_del_locator_reply'.
type LispAddDelLocatorReply struct {
	Retval int32
}

func (m *LispAddDelLocatorReply) Reset()                        { *m = LispAddDelLocatorReply{} }
func (*LispAddDelLocatorReply) GetMessageName() string          { return "lisp_add_del_locator_reply" }
func (*LispAddDelLocatorReply) GetCrcString() string            { return "e8d4e804" }
func (*LispAddDelLocatorReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispAddDelLocatorSet represents VPP binary API message 'lisp_add_del_locator_set'.
type LispAddDelLocatorSet struct {
	IsAdd          bool
	LocatorSetName string `struc:"[64]byte"`
	LocatorNum     uint32 `struc:"sizeof=Locators"`
	Locators       []LocalLocator
}

func (m *LispAddDelLocatorSet) Reset()                        { *m = LispAddDelLocatorSet{} }
func (*LispAddDelLocatorSet) GetMessageName() string          { return "lisp_add_del_locator_set" }
func (*LispAddDelLocatorSet) GetCrcString() string            { return "6fcd6471" }
func (*LispAddDelLocatorSet) GetMessageType() api.MessageType { return api.RequestMessage }

// LispAddDelLocatorSetReply represents VPP binary API message 'lisp_add_del_locator_set_reply'.
type LispAddDelLocatorSetReply struct {
	Retval  int32
	LsIndex uint32
}

func (m *LispAddDelLocatorSetReply) Reset()                        { *m = LispAddDelLocatorSetReply{} }
func (*LispAddDelLocatorSetReply) GetMessageName() string          { return "lisp_add_del_locator_set_reply" }
func (*LispAddDelLocatorSetReply) GetCrcString() string            { return "b6666db4" }
func (*LispAddDelLocatorSetReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispAddDelMapRequestItrRlocs represents VPP binary API message 'lisp_add_del_map_request_itr_rlocs'.
type LispAddDelMapRequestItrRlocs struct {
	IsAdd          bool
	LocatorSetName string `struc:"[64]byte"`
}

func (m *LispAddDelMapRequestItrRlocs) Reset() { *m = LispAddDelMapRequestItrRlocs{} }
func (*LispAddDelMapRequestItrRlocs) GetMessageName() string {
	return "lisp_add_del_map_request_itr_rlocs"
}
func (*LispAddDelMapRequestItrRlocs) GetCrcString() string            { return "6be88e45" }
func (*LispAddDelMapRequestItrRlocs) GetMessageType() api.MessageType { return api.RequestMessage }

// LispAddDelMapRequestItrRlocsReply represents VPP binary API message 'lisp_add_del_map_request_itr_rlocs_reply'.
type LispAddDelMapRequestItrRlocsReply struct {
	Retval int32
}

func (m *LispAddDelMapRequestItrRlocsReply) Reset() { *m = LispAddDelMapRequestItrRlocsReply{} }
func (*LispAddDelMapRequestItrRlocsReply) GetMessageName() string {
	return "lisp_add_del_map_request_itr_rlocs_reply"
}
func (*LispAddDelMapRequestItrRlocsReply) GetCrcString() string            { return "e8d4e804" }
func (*LispAddDelMapRequestItrRlocsReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispAddDelMapResolver represents VPP binary API message 'lisp_add_del_map_resolver'.
type LispAddDelMapResolver struct {
	IsAdd     bool
	IPAddress Address
}

func (m *LispAddDelMapResolver) Reset()                        { *m = LispAddDelMapResolver{} }
func (*LispAddDelMapResolver) GetMessageName() string          { return "lisp_add_del_map_resolver" }
func (*LispAddDelMapResolver) GetCrcString() string            { return "6598ea7c" }
func (*LispAddDelMapResolver) GetMessageType() api.MessageType { return api.RequestMessage }

// LispAddDelMapResolverReply represents VPP binary API message 'lisp_add_del_map_resolver_reply'.
type LispAddDelMapResolverReply struct {
	Retval int32
}

func (m *LispAddDelMapResolverReply) Reset()                        { *m = LispAddDelMapResolverReply{} }
func (*LispAddDelMapResolverReply) GetMessageName() string          { return "lisp_add_del_map_resolver_reply" }
func (*LispAddDelMapResolverReply) GetCrcString() string            { return "e8d4e804" }
func (*LispAddDelMapResolverReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispAddDelMapServer represents VPP binary API message 'lisp_add_del_map_server'.
type LispAddDelMapServer struct {
	IsAdd     bool
	IPAddress Address
}

func (m *LispAddDelMapServer) Reset()                        { *m = LispAddDelMapServer{} }
func (*LispAddDelMapServer) GetMessageName() string          { return "lisp_add_del_map_server" }
func (*LispAddDelMapServer) GetCrcString() string            { return "6598ea7c" }
func (*LispAddDelMapServer) GetMessageType() api.MessageType { return api.RequestMessage }

// LispAddDelMapServerReply represents VPP binary API message 'lisp_add_del_map_server_reply'.
type LispAddDelMapServerReply struct {
	Retval int32
}

func (m *LispAddDelMapServerReply) Reset()                        { *m = LispAddDelMapServerReply{} }
func (*LispAddDelMapServerReply) GetMessageName() string          { return "lisp_add_del_map_server_reply" }
func (*LispAddDelMapServerReply) GetCrcString() string            { return "e8d4e804" }
func (*LispAddDelMapServerReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispAddDelRemoteMapping represents VPP binary API message 'lisp_add_del_remote_mapping'.
type LispAddDelRemoteMapping struct {
	IsAdd    bool
	IsSrcDst bool
	DelAll   bool
	Vni      uint32
	Action   uint8
	Deid     Eid
	Seid     Eid
	RlocNum  uint32 `struc:"sizeof=Rlocs"`
	Rlocs    []RemoteLocator
}

func (m *LispAddDelRemoteMapping) Reset()                        { *m = LispAddDelRemoteMapping{} }
func (*LispAddDelRemoteMapping) GetMessageName() string          { return "lisp_add_del_remote_mapping" }
func (*LispAddDelRemoteMapping) GetCrcString() string            { return "fae8ed77" }
func (*LispAddDelRemoteMapping) GetMessageType() api.MessageType { return api.RequestMessage }

// LispAddDelRemoteMappingReply represents VPP binary API message 'lisp_add_del_remote_mapping_reply'.
type LispAddDelRemoteMappingReply struct {
	Retval int32
}

func (m *LispAddDelRemoteMappingReply) Reset() { *m = LispAddDelRemoteMappingReply{} }
func (*LispAddDelRemoteMappingReply) GetMessageName() string {
	return "lisp_add_del_remote_mapping_reply"
}
func (*LispAddDelRemoteMappingReply) GetCrcString() string            { return "e8d4e804" }
func (*LispAddDelRemoteMappingReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispAdjacenciesGet represents VPP binary API message 'lisp_adjacencies_get'.
type LispAdjacenciesGet struct {
	Vni uint32
}

func (m *LispAdjacenciesGet) Reset()                        { *m = LispAdjacenciesGet{} }
func (*LispAdjacenciesGet) GetMessageName() string          { return "lisp_adjacencies_get" }
func (*LispAdjacenciesGet) GetCrcString() string            { return "8d1f2fe9" }
func (*LispAdjacenciesGet) GetMessageType() api.MessageType { return api.RequestMessage }

// LispAdjacenciesGetReply represents VPP binary API message 'lisp_adjacencies_get_reply'.
type LispAdjacenciesGetReply struct {
	Retval      int32
	Count       uint32 `struc:"sizeof=Adjacencies"`
	Adjacencies []LispAdjacency
}

func (m *LispAdjacenciesGetReply) Reset()                        { *m = LispAdjacenciesGetReply{} }
func (*LispAdjacenciesGetReply) GetMessageName() string          { return "lisp_adjacencies_get_reply" }
func (*LispAdjacenciesGetReply) GetCrcString() string            { return "3f97bcdd" }
func (*LispAdjacenciesGetReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispEidTableAddDelMap represents VPP binary API message 'lisp_eid_table_add_del_map'.
type LispEidTableAddDelMap struct {
	IsAdd   bool
	Vni     uint32
	DpTable uint32
	IsL2    bool
}

func (m *LispEidTableAddDelMap) Reset()                        { *m = LispEidTableAddDelMap{} }
func (*LispEidTableAddDelMap) GetMessageName() string          { return "lisp_eid_table_add_del_map" }
func (*LispEidTableAddDelMap) GetCrcString() string            { return "9481416b" }
func (*LispEidTableAddDelMap) GetMessageType() api.MessageType { return api.RequestMessage }

// LispEidTableAddDelMapReply represents VPP binary API message 'lisp_eid_table_add_del_map_reply'.
type LispEidTableAddDelMapReply struct {
	Retval int32
}

func (m *LispEidTableAddDelMapReply) Reset()                        { *m = LispEidTableAddDelMapReply{} }
func (*LispEidTableAddDelMapReply) GetMessageName() string          { return "lisp_eid_table_add_del_map_reply" }
func (*LispEidTableAddDelMapReply) GetCrcString() string            { return "e8d4e804" }
func (*LispEidTableAddDelMapReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispEidTableDetails represents VPP binary API message 'lisp_eid_table_details'.
type LispEidTableDetails struct {
	LocatorSetIndex uint32
	Action          uint8
	IsLocal         bool
	IsSrcDst        bool
	Vni             uint32
	Deid            Eid
	Seid            Eid
	TTL             uint32
	Authoritative   uint8
	Key             HmacKey
}

func (m *LispEidTableDetails) Reset()                        { *m = LispEidTableDetails{} }
func (*LispEidTableDetails) GetMessageName() string          { return "lisp_eid_table_details" }
func (*LispEidTableDetails) GetCrcString() string            { return "4bc32e3a" }
func (*LispEidTableDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispEidTableDump represents VPP binary API message 'lisp_eid_table_dump'.
type LispEidTableDump struct {
	EidSet       uint8
	PrefixLength uint8
	Vni          uint32
	Eid          Eid
	Filter       LispLocatorSetFilter
}

func (m *LispEidTableDump) Reset()                        { *m = LispEidTableDump{} }
func (*LispEidTableDump) GetMessageName() string          { return "lisp_eid_table_dump" }
func (*LispEidTableDump) GetCrcString() string            { return "b959b73b" }
func (*LispEidTableDump) GetMessageType() api.MessageType { return api.RequestMessage }

// LispEidTableMapDetails represents VPP binary API message 'lisp_eid_table_map_details'.
type LispEidTableMapDetails struct {
	Vni     uint32
	DpTable uint32
}

func (m *LispEidTableMapDetails) Reset()                        { *m = LispEidTableMapDetails{} }
func (*LispEidTableMapDetails) GetMessageName() string          { return "lisp_eid_table_map_details" }
func (*LispEidTableMapDetails) GetCrcString() string            { return "0b6859e2" }
func (*LispEidTableMapDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispEidTableMapDump represents VPP binary API message 'lisp_eid_table_map_dump'.
type LispEidTableMapDump struct {
	IsL2 bool
}

func (m *LispEidTableMapDump) Reset()                        { *m = LispEidTableMapDump{} }
func (*LispEidTableMapDump) GetMessageName() string          { return "lisp_eid_table_map_dump" }
func (*LispEidTableMapDump) GetCrcString() string            { return "d6cf0c3d" }
func (*LispEidTableMapDump) GetMessageType() api.MessageType { return api.RequestMessage }

// LispEidTableVniDetails represents VPP binary API message 'lisp_eid_table_vni_details'.
type LispEidTableVniDetails struct {
	Vni uint32
}

func (m *LispEidTableVniDetails) Reset()                        { *m = LispEidTableVniDetails{} }
func (*LispEidTableVniDetails) GetMessageName() string          { return "lisp_eid_table_vni_details" }
func (*LispEidTableVniDetails) GetCrcString() string            { return "64abc01e" }
func (*LispEidTableVniDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispEidTableVniDump represents VPP binary API message 'lisp_eid_table_vni_dump'.
type LispEidTableVniDump struct{}

func (m *LispEidTableVniDump) Reset()                        { *m = LispEidTableVniDump{} }
func (*LispEidTableVniDump) GetMessageName() string          { return "lisp_eid_table_vni_dump" }
func (*LispEidTableVniDump) GetCrcString() string            { return "51077d14" }
func (*LispEidTableVniDump) GetMessageType() api.MessageType { return api.RequestMessage }

// LispEnableDisable represents VPP binary API message 'lisp_enable_disable'.
type LispEnableDisable struct {
	IsEnable bool
}

func (m *LispEnableDisable) Reset()                        { *m = LispEnableDisable{} }
func (*LispEnableDisable) GetMessageName() string          { return "lisp_enable_disable" }
func (*LispEnableDisable) GetCrcString() string            { return "c264d7bf" }
func (*LispEnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// LispEnableDisableReply represents VPP binary API message 'lisp_enable_disable_reply'.
type LispEnableDisableReply struct {
	Retval int32
}

func (m *LispEnableDisableReply) Reset()                        { *m = LispEnableDisableReply{} }
func (*LispEnableDisableReply) GetMessageName() string          { return "lisp_enable_disable_reply" }
func (*LispEnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*LispEnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispGetMapRequestItrRlocs represents VPP binary API message 'lisp_get_map_request_itr_rlocs'.
type LispGetMapRequestItrRlocs struct{}

func (m *LispGetMapRequestItrRlocs) Reset()                        { *m = LispGetMapRequestItrRlocs{} }
func (*LispGetMapRequestItrRlocs) GetMessageName() string          { return "lisp_get_map_request_itr_rlocs" }
func (*LispGetMapRequestItrRlocs) GetCrcString() string            { return "51077d14" }
func (*LispGetMapRequestItrRlocs) GetMessageType() api.MessageType { return api.RequestMessage }

// LispGetMapRequestItrRlocsReply represents VPP binary API message 'lisp_get_map_request_itr_rlocs_reply'.
type LispGetMapRequestItrRlocsReply struct {
	Retval         int32
	LocatorSetName string `struc:"[64]byte"`
}

func (m *LispGetMapRequestItrRlocsReply) Reset() { *m = LispGetMapRequestItrRlocsReply{} }
func (*LispGetMapRequestItrRlocsReply) GetMessageName() string {
	return "lisp_get_map_request_itr_rlocs_reply"
}
func (*LispGetMapRequestItrRlocsReply) GetCrcString() string            { return "76580f3a" }
func (*LispGetMapRequestItrRlocsReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispLocatorDetails represents VPP binary API message 'lisp_locator_details'.
type LispLocatorDetails struct {
	Local     uint8
	SwIfIndex InterfaceIndex
	IPAddress Address
	Priority  uint8
	Weight    uint8
}

func (m *LispLocatorDetails) Reset()                        { *m = LispLocatorDetails{} }
func (*LispLocatorDetails) GetMessageName() string          { return "lisp_locator_details" }
func (*LispLocatorDetails) GetCrcString() string            { return "c0c4c2a7" }
func (*LispLocatorDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispLocatorDump represents VPP binary API message 'lisp_locator_dump'.
type LispLocatorDump struct {
	LsIndex    uint32
	LsName     string `struc:"[64]byte"`
	IsIndexSet uint8
}

func (m *LispLocatorDump) Reset()                        { *m = LispLocatorDump{} }
func (*LispLocatorDump) GetMessageName() string          { return "lisp_locator_dump" }
func (*LispLocatorDump) GetCrcString() string            { return "b954fad7" }
func (*LispLocatorDump) GetMessageType() api.MessageType { return api.RequestMessage }

// LispLocatorSetDetails represents VPP binary API message 'lisp_locator_set_details'.
type LispLocatorSetDetails struct {
	LsIndex uint32
	LsName  string `struc:"[64]byte"`
}

func (m *LispLocatorSetDetails) Reset()                        { *m = LispLocatorSetDetails{} }
func (*LispLocatorSetDetails) GetMessageName() string          { return "lisp_locator_set_details" }
func (*LispLocatorSetDetails) GetCrcString() string            { return "5b33a105" }
func (*LispLocatorSetDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispLocatorSetDump represents VPP binary API message 'lisp_locator_set_dump'.
type LispLocatorSetDump struct {
	Filter LispLocatorSetFilter
}

func (m *LispLocatorSetDump) Reset()                        { *m = LispLocatorSetDump{} }
func (*LispLocatorSetDump) GetMessageName() string          { return "lisp_locator_set_dump" }
func (*LispLocatorSetDump) GetCrcString() string            { return "c2cb5922" }
func (*LispLocatorSetDump) GetMessageType() api.MessageType { return api.RequestMessage }

// LispMapRegisterEnableDisable represents VPP binary API message 'lisp_map_register_enable_disable'.
type LispMapRegisterEnableDisable struct {
	IsEnable bool
}

func (m *LispMapRegisterEnableDisable) Reset() { *m = LispMapRegisterEnableDisable{} }
func (*LispMapRegisterEnableDisable) GetMessageName() string {
	return "lisp_map_register_enable_disable"
}
func (*LispMapRegisterEnableDisable) GetCrcString() string            { return "c264d7bf" }
func (*LispMapRegisterEnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// LispMapRegisterEnableDisableReply represents VPP binary API message 'lisp_map_register_enable_disable_reply'.
type LispMapRegisterEnableDisableReply struct {
	Retval int32
}

func (m *LispMapRegisterEnableDisableReply) Reset() { *m = LispMapRegisterEnableDisableReply{} }
func (*LispMapRegisterEnableDisableReply) GetMessageName() string {
	return "lisp_map_register_enable_disable_reply"
}
func (*LispMapRegisterEnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*LispMapRegisterEnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispMapRequestMode represents VPP binary API message 'lisp_map_request_mode'.
type LispMapRequestMode struct {
	IsSrcDst bool
}

func (m *LispMapRequestMode) Reset()                        { *m = LispMapRequestMode{} }
func (*LispMapRequestMode) GetMessageName() string          { return "lisp_map_request_mode" }
func (*LispMapRequestMode) GetCrcString() string            { return "f43c26ae" }
func (*LispMapRequestMode) GetMessageType() api.MessageType { return api.RequestMessage }

// LispMapRequestModeReply represents VPP binary API message 'lisp_map_request_mode_reply'.
type LispMapRequestModeReply struct {
	Retval int32
}

func (m *LispMapRequestModeReply) Reset()                        { *m = LispMapRequestModeReply{} }
func (*LispMapRequestModeReply) GetMessageName() string          { return "lisp_map_request_mode_reply" }
func (*LispMapRequestModeReply) GetCrcString() string            { return "e8d4e804" }
func (*LispMapRequestModeReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispMapResolverDetails represents VPP binary API message 'lisp_map_resolver_details'.
type LispMapResolverDetails struct {
	IPAddress Address
}

func (m *LispMapResolverDetails) Reset()                        { *m = LispMapResolverDetails{} }
func (*LispMapResolverDetails) GetMessageName() string          { return "lisp_map_resolver_details" }
func (*LispMapResolverDetails) GetCrcString() string            { return "82a09deb" }
func (*LispMapResolverDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispMapResolverDump represents VPP binary API message 'lisp_map_resolver_dump'.
type LispMapResolverDump struct{}

func (m *LispMapResolverDump) Reset()                        { *m = LispMapResolverDump{} }
func (*LispMapResolverDump) GetMessageName() string          { return "lisp_map_resolver_dump" }
func (*LispMapResolverDump) GetCrcString() string            { return "51077d14" }
func (*LispMapResolverDump) GetMessageType() api.MessageType { return api.RequestMessage }

// LispMapServerDetails represents VPP binary API message 'lisp_map_server_details'.
type LispMapServerDetails struct {
	IPAddress Address
}

func (m *LispMapServerDetails) Reset()                        { *m = LispMapServerDetails{} }
func (*LispMapServerDetails) GetMessageName() string          { return "lisp_map_server_details" }
func (*LispMapServerDetails) GetCrcString() string            { return "82a09deb" }
func (*LispMapServerDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispMapServerDump represents VPP binary API message 'lisp_map_server_dump'.
type LispMapServerDump struct{}

func (m *LispMapServerDump) Reset()                        { *m = LispMapServerDump{} }
func (*LispMapServerDump) GetMessageName() string          { return "lisp_map_server_dump" }
func (*LispMapServerDump) GetCrcString() string            { return "51077d14" }
func (*LispMapServerDump) GetMessageType() api.MessageType { return api.RequestMessage }

// LispPitrSetLocatorSet represents VPP binary API message 'lisp_pitr_set_locator_set'.
type LispPitrSetLocatorSet struct {
	IsAdd  bool
	LsName string `struc:"[64]byte"`
}

func (m *LispPitrSetLocatorSet) Reset()                        { *m = LispPitrSetLocatorSet{} }
func (*LispPitrSetLocatorSet) GetMessageName() string          { return "lisp_pitr_set_locator_set" }
func (*LispPitrSetLocatorSet) GetCrcString() string            { return "486e2b76" }
func (*LispPitrSetLocatorSet) GetMessageType() api.MessageType { return api.RequestMessage }

// LispPitrSetLocatorSetReply represents VPP binary API message 'lisp_pitr_set_locator_set_reply'.
type LispPitrSetLocatorSetReply struct {
	Retval int32
}

func (m *LispPitrSetLocatorSetReply) Reset()                        { *m = LispPitrSetLocatorSetReply{} }
func (*LispPitrSetLocatorSetReply) GetMessageName() string          { return "lisp_pitr_set_locator_set_reply" }
func (*LispPitrSetLocatorSetReply) GetCrcString() string            { return "e8d4e804" }
func (*LispPitrSetLocatorSetReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispRlocProbeEnableDisable represents VPP binary API message 'lisp_rloc_probe_enable_disable'.
type LispRlocProbeEnableDisable struct {
	IsEnable bool
}

func (m *LispRlocProbeEnableDisable) Reset()                        { *m = LispRlocProbeEnableDisable{} }
func (*LispRlocProbeEnableDisable) GetMessageName() string          { return "lisp_rloc_probe_enable_disable" }
func (*LispRlocProbeEnableDisable) GetCrcString() string            { return "c264d7bf" }
func (*LispRlocProbeEnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// LispRlocProbeEnableDisableReply represents VPP binary API message 'lisp_rloc_probe_enable_disable_reply'.
type LispRlocProbeEnableDisableReply struct {
	Retval int32
}

func (m *LispRlocProbeEnableDisableReply) Reset() { *m = LispRlocProbeEnableDisableReply{} }
func (*LispRlocProbeEnableDisableReply) GetMessageName() string {
	return "lisp_rloc_probe_enable_disable_reply"
}
func (*LispRlocProbeEnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*LispRlocProbeEnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// LispUsePetr represents VPP binary API message 'lisp_use_petr'.
type LispUsePetr struct {
	IPAddress Address
	IsAdd     bool
}

func (m *LispUsePetr) Reset()                        { *m = LispUsePetr{} }
func (*LispUsePetr) GetMessageName() string          { return "lisp_use_petr" }
func (*LispUsePetr) GetCrcString() string            { return "9e141831" }
func (*LispUsePetr) GetMessageType() api.MessageType { return api.RequestMessage }

// LispUsePetrReply represents VPP binary API message 'lisp_use_petr_reply'.
type LispUsePetrReply struct {
	Retval int32
}

func (m *LispUsePetrReply) Reset()                        { *m = LispUsePetrReply{} }
func (*LispUsePetrReply) GetMessageName() string          { return "lisp_use_petr_reply" }
func (*LispUsePetrReply) GetCrcString() string            { return "e8d4e804" }
func (*LispUsePetrReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ShowLispMapRegisterState represents VPP binary API message 'show_lisp_map_register_state'.
type ShowLispMapRegisterState struct{}

func (m *ShowLispMapRegisterState) Reset()                        { *m = ShowLispMapRegisterState{} }
func (*ShowLispMapRegisterState) GetMessageName() string          { return "show_lisp_map_register_state" }
func (*ShowLispMapRegisterState) GetCrcString() string            { return "51077d14" }
func (*ShowLispMapRegisterState) GetMessageType() api.MessageType { return api.RequestMessage }

// ShowLispMapRegisterStateReply represents VPP binary API message 'show_lisp_map_register_state_reply'.
type ShowLispMapRegisterStateReply struct {
	Retval    int32
	IsEnabled bool
}

func (m *ShowLispMapRegisterStateReply) Reset() { *m = ShowLispMapRegisterStateReply{} }
func (*ShowLispMapRegisterStateReply) GetMessageName() string {
	return "show_lisp_map_register_state_reply"
}
func (*ShowLispMapRegisterStateReply) GetCrcString() string            { return "e33a377b" }
func (*ShowLispMapRegisterStateReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ShowLispMapRequestMode represents VPP binary API message 'show_lisp_map_request_mode'.
type ShowLispMapRequestMode struct{}

func (m *ShowLispMapRequestMode) Reset()                        { *m = ShowLispMapRequestMode{} }
func (*ShowLispMapRequestMode) GetMessageName() string          { return "show_lisp_map_request_mode" }
func (*ShowLispMapRequestMode) GetCrcString() string            { return "51077d14" }
func (*ShowLispMapRequestMode) GetMessageType() api.MessageType { return api.RequestMessage }

// ShowLispMapRequestModeReply represents VPP binary API message 'show_lisp_map_request_mode_reply'.
type ShowLispMapRequestModeReply struct {
	Retval   int32
	IsSrcDst bool
}

func (m *ShowLispMapRequestModeReply) Reset() { *m = ShowLispMapRequestModeReply{} }
func (*ShowLispMapRequestModeReply) GetMessageName() string {
	return "show_lisp_map_request_mode_reply"
}
func (*ShowLispMapRequestModeReply) GetCrcString() string            { return "5b05038e" }
func (*ShowLispMapRequestModeReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ShowLispPitr represents VPP binary API message 'show_lisp_pitr'.
type ShowLispPitr struct{}

func (m *ShowLispPitr) Reset()                        { *m = ShowLispPitr{} }
func (*ShowLispPitr) GetMessageName() string          { return "show_lisp_pitr" }
func (*ShowLispPitr) GetCrcString() string            { return "51077d14" }
func (*ShowLispPitr) GetMessageType() api.MessageType { return api.RequestMessage }

// ShowLispPitrReply represents VPP binary API message 'show_lisp_pitr_reply'.
type ShowLispPitrReply struct {
	Retval         int32
	IsEnabled      bool
	LocatorSetName string `struc:"[64]byte"`
}

func (m *ShowLispPitrReply) Reset()                        { *m = ShowLispPitrReply{} }
func (*ShowLispPitrReply) GetMessageName() string          { return "show_lisp_pitr_reply" }
func (*ShowLispPitrReply) GetCrcString() string            { return "27aa69b1" }
func (*ShowLispPitrReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ShowLispRlocProbeState represents VPP binary API message 'show_lisp_rloc_probe_state'.
type ShowLispRlocProbeState struct{}

func (m *ShowLispRlocProbeState) Reset()                        { *m = ShowLispRlocProbeState{} }
func (*ShowLispRlocProbeState) GetMessageName() string          { return "show_lisp_rloc_probe_state" }
func (*ShowLispRlocProbeState) GetCrcString() string            { return "51077d14" }
func (*ShowLispRlocProbeState) GetMessageType() api.MessageType { return api.RequestMessage }

// ShowLispRlocProbeStateReply represents VPP binary API message 'show_lisp_rloc_probe_state_reply'.
type ShowLispRlocProbeStateReply struct {
	Retval    int32
	IsEnabled bool
}

func (m *ShowLispRlocProbeStateReply) Reset() { *m = ShowLispRlocProbeStateReply{} }
func (*ShowLispRlocProbeStateReply) GetMessageName() string {
	return "show_lisp_rloc_probe_state_reply"
}
func (*ShowLispRlocProbeStateReply) GetCrcString() string            { return "e33a377b" }
func (*ShowLispRlocProbeStateReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ShowLispStatus represents VPP binary API message 'show_lisp_status'.
type ShowLispStatus struct{}

func (m *ShowLispStatus) Reset()                        { *m = ShowLispStatus{} }
func (*ShowLispStatus) GetMessageName() string          { return "show_lisp_status" }
func (*ShowLispStatus) GetCrcString() string            { return "51077d14" }
func (*ShowLispStatus) GetMessageType() api.MessageType { return api.RequestMessage }

// ShowLispStatusReply represents VPP binary API message 'show_lisp_status_reply'.
type ShowLispStatusReply struct {
	Retval        int32
	IsLispEnabled bool
	IsGpeEnabled  bool
}

func (m *ShowLispStatusReply) Reset()                        { *m = ShowLispStatusReply{} }
func (*ShowLispStatusReply) GetMessageName() string          { return "show_lisp_status_reply" }
func (*ShowLispStatusReply) GetCrcString() string            { return "9e8f10c0" }
func (*ShowLispStatusReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ShowLispUsePetr represents VPP binary API message 'show_lisp_use_petr'.
type ShowLispUsePetr struct{}

func (m *ShowLispUsePetr) Reset()                        { *m = ShowLispUsePetr{} }
func (*ShowLispUsePetr) GetMessageName() string          { return "show_lisp_use_petr" }
func (*ShowLispUsePetr) GetCrcString() string            { return "51077d14" }
func (*ShowLispUsePetr) GetMessageType() api.MessageType { return api.RequestMessage }

// ShowLispUsePetrReply represents VPP binary API message 'show_lisp_use_petr_reply'.
type ShowLispUsePetrReply struct {
	Retval       int32
	IsPetrEnable bool
	IPAddress    Address
}

func (m *ShowLispUsePetrReply) Reset()                        { *m = ShowLispUsePetrReply{} }
func (*ShowLispUsePetrReply) GetMessageName() string          { return "show_lisp_use_petr_reply" }
func (*ShowLispUsePetrReply) GetCrcString() string            { return "dcad8a81" }
func (*ShowLispUsePetrReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*LispAddDelAdjacency)(nil), "lisp.LispAddDelAdjacency")
	api.RegisterMessage((*LispAddDelAdjacencyReply)(nil), "lisp.LispAddDelAdjacencyReply")
	api.RegisterMessage((*LispAddDelLocalEid)(nil), "lisp.LispAddDelLocalEid")
	api.RegisterMessage((*LispAddDelLocalEidReply)(nil), "lisp.LispAddDelLocalEidReply")
	api.RegisterMessage((*LispAddDelLocator)(nil), "lisp.LispAddDelLocator")
	api.RegisterMessage((*LispAddDelLocatorReply)(nil), "lisp.LispAddDelLocatorReply")
	api.RegisterMessage((*LispAddDelLocatorSet)(nil), "lisp.LispAddDelLocatorSet")
	api.RegisterMessage((*LispAddDelLocatorSetReply)(nil), "lisp.LispAddDelLocatorSetReply")
	api.RegisterMessage((*LispAddDelMapRequestItrRlocs)(nil), "lisp.LispAddDelMapRequestItrRlocs")
	api.RegisterMessage((*LispAddDelMapRequestItrRlocsReply)(nil), "lisp.LispAddDelMapRequestItrRlocsReply")
	api.RegisterMessage((*LispAddDelMapResolver)(nil), "lisp.LispAddDelMapResolver")
	api.RegisterMessage((*LispAddDelMapResolverReply)(nil), "lisp.LispAddDelMapResolverReply")
	api.RegisterMessage((*LispAddDelMapServer)(nil), "lisp.LispAddDelMapServer")
	api.RegisterMessage((*LispAddDelMapServerReply)(nil), "lisp.LispAddDelMapServerReply")
	api.RegisterMessage((*LispAddDelRemoteMapping)(nil), "lisp.LispAddDelRemoteMapping")
	api.RegisterMessage((*LispAddDelRemoteMappingReply)(nil), "lisp.LispAddDelRemoteMappingReply")
	api.RegisterMessage((*LispAdjacenciesGet)(nil), "lisp.LispAdjacenciesGet")
	api.RegisterMessage((*LispAdjacenciesGetReply)(nil), "lisp.LispAdjacenciesGetReply")
	api.RegisterMessage((*LispEidTableAddDelMap)(nil), "lisp.LispEidTableAddDelMap")
	api.RegisterMessage((*LispEidTableAddDelMapReply)(nil), "lisp.LispEidTableAddDelMapReply")
	api.RegisterMessage((*LispEidTableDetails)(nil), "lisp.LispEidTableDetails")
	api.RegisterMessage((*LispEidTableDump)(nil), "lisp.LispEidTableDump")
	api.RegisterMessage((*LispEidTableMapDetails)(nil), "lisp.LispEidTableMapDetails")
	api.RegisterMessage((*LispEidTableMapDump)(nil), "lisp.LispEidTableMapDump")
	api.RegisterMessage((*LispEidTableVniDetails)(nil), "lisp.LispEidTableVniDetails")
	api.RegisterMessage((*LispEidTableVniDump)(nil), "lisp.LispEidTableVniDump")
	api.RegisterMessage((*LispEnableDisable)(nil), "lisp.LispEnableDisable")
	api.RegisterMessage((*LispEnableDisableReply)(nil), "lisp.LispEnableDisableReply")
	api.RegisterMessage((*LispGetMapRequestItrRlocs)(nil), "lisp.LispGetMapRequestItrRlocs")
	api.RegisterMessage((*LispGetMapRequestItrRlocsReply)(nil), "lisp.LispGetMapRequestItrRlocsReply")
	api.RegisterMessage((*LispLocatorDetails)(nil), "lisp.LispLocatorDetails")
	api.RegisterMessage((*LispLocatorDump)(nil), "lisp.LispLocatorDump")
	api.RegisterMessage((*LispLocatorSetDetails)(nil), "lisp.LispLocatorSetDetails")
	api.RegisterMessage((*LispLocatorSetDump)(nil), "lisp.LispLocatorSetDump")
	api.RegisterMessage((*LispMapRegisterEnableDisable)(nil), "lisp.LispMapRegisterEnableDisable")
	api.RegisterMessage((*LispMapRegisterEnableDisableReply)(nil), "lisp.LispMapRegisterEnableDisableReply")
	api.RegisterMessage((*LispMapRequestMode)(nil), "lisp.LispMapRequestMode")
	api.RegisterMessage((*LispMapRequestModeReply)(nil), "lisp.LispMapRequestModeReply")
	api.RegisterMessage((*LispMapResolverDetails)(nil), "lisp.LispMapResolverDetails")
	api.RegisterMessage((*LispMapResolverDump)(nil), "lisp.LispMapResolverDump")
	api.RegisterMessage((*LispMapServerDetails)(nil), "lisp.LispMapServerDetails")
	api.RegisterMessage((*LispMapServerDump)(nil), "lisp.LispMapServerDump")
	api.RegisterMessage((*LispPitrSetLocatorSet)(nil), "lisp.LispPitrSetLocatorSet")
	api.RegisterMessage((*LispPitrSetLocatorSetReply)(nil), "lisp.LispPitrSetLocatorSetReply")
	api.RegisterMessage((*LispRlocProbeEnableDisable)(nil), "lisp.LispRlocProbeEnableDisable")
	api.RegisterMessage((*LispRlocProbeEnableDisableReply)(nil), "lisp.LispRlocProbeEnableDisableReply")
	api.RegisterMessage((*LispUsePetr)(nil), "lisp.LispUsePetr")
	api.RegisterMessage((*LispUsePetrReply)(nil), "lisp.LispUsePetrReply")
	api.RegisterMessage((*ShowLispMapRegisterState)(nil), "lisp.ShowLispMapRegisterState")
	api.RegisterMessage((*ShowLispMapRegisterStateReply)(nil), "lisp.ShowLispMapRegisterStateReply")
	api.RegisterMessage((*ShowLispMapRequestMode)(nil), "lisp.ShowLispMapRequestMode")
	api.RegisterMessage((*ShowLispMapRequestModeReply)(nil), "lisp.ShowLispMapRequestModeReply")
	api.RegisterMessage((*ShowLispPitr)(nil), "lisp.ShowLispPitr")
	api.RegisterMessage((*ShowLispPitrReply)(nil), "lisp.ShowLispPitrReply")
	api.RegisterMessage((*ShowLispRlocProbeState)(nil), "lisp.ShowLispRlocProbeState")
	api.RegisterMessage((*ShowLispRlocProbeStateReply)(nil), "lisp.ShowLispRlocProbeStateReply")
	api.RegisterMessage((*ShowLispStatus)(nil), "lisp.ShowLispStatus")
	api.RegisterMessage((*ShowLispStatusReply)(nil), "lisp.ShowLispStatusReply")
	api.RegisterMessage((*ShowLispUsePetr)(nil), "lisp.ShowLispUsePetr")
	api.RegisterMessage((*ShowLispUsePetrReply)(nil), "lisp.ShowLispUsePetrReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*LispAddDelAdjacency)(nil),
		(*LispAddDelAdjacencyReply)(nil),
		(*LispAddDelLocalEid)(nil),
		(*LispAddDelLocalEidReply)(nil),
		(*LispAddDelLocator)(nil),
		(*LispAddDelLocatorReply)(nil),
		(*LispAddDelLocatorSet)(nil),
		(*LispAddDelLocatorSetReply)(nil),
		(*LispAddDelMapRequestItrRlocs)(nil),
		(*LispAddDelMapRequestItrRlocsReply)(nil),
		(*LispAddDelMapResolver)(nil),
		(*LispAddDelMapResolverReply)(nil),
		(*LispAddDelMapServer)(nil),
		(*LispAddDelMapServerReply)(nil),
		(*LispAddDelRemoteMapping)(nil),
		(*LispAddDelRemoteMappingReply)(nil),
		(*LispAdjacenciesGet)(nil),
		(*LispAdjacenciesGetReply)(nil),
		(*LispEidTableAddDelMap)(nil),
		(*LispEidTableAddDelMapReply)(nil),
		(*LispEidTableDetails)(nil),
		(*LispEidTableDump)(nil),
		(*LispEidTableMapDetails)(nil),
		(*LispEidTableMapDump)(nil),
		(*LispEidTableVniDetails)(nil),
		(*LispEidTableVniDump)(nil),
		(*LispEnableDisable)(nil),
		(*LispEnableDisableReply)(nil),
		(*LispGetMapRequestItrRlocs)(nil),
		(*LispGetMapRequestItrRlocsReply)(nil),
		(*LispLocatorDetails)(nil),
		(*LispLocatorDump)(nil),
		(*LispLocatorSetDetails)(nil),
		(*LispLocatorSetDump)(nil),
		(*LispMapRegisterEnableDisable)(nil),
		(*LispMapRegisterEnableDisableReply)(nil),
		(*LispMapRequestMode)(nil),
		(*LispMapRequestModeReply)(nil),
		(*LispMapResolverDetails)(nil),
		(*LispMapResolverDump)(nil),
		(*LispMapServerDetails)(nil),
		(*LispMapServerDump)(nil),
		(*LispPitrSetLocatorSet)(nil),
		(*LispPitrSetLocatorSetReply)(nil),
		(*LispRlocProbeEnableDisable)(nil),
		(*LispRlocProbeEnableDisableReply)(nil),
		(*LispUsePetr)(nil),
		(*LispUsePetrReply)(nil),
		(*ShowLispMapRegisterState)(nil),
		(*ShowLispMapRegisterStateReply)(nil),
		(*ShowLispMapRequestMode)(nil),
		(*ShowLispMapRequestModeReply)(nil),
		(*ShowLispPitr)(nil),
		(*ShowLispPitrReply)(nil),
		(*ShowLispRlocProbeState)(nil),
		(*ShowLispRlocProbeStateReply)(nil),
		(*ShowLispStatus)(nil),
		(*ShowLispStatusReply)(nil),
		(*ShowLispUsePetr)(nil),
		(*ShowLispUsePetrReply)(nil),
	}
}

// RPCService represents RPC service API for lisp module.
type RPCService interface {
	DumpLispEidTable(ctx context.Context, in *LispEidTableDump) (RPCService_DumpLispEidTableClient, error)
	DumpLispEidTableMap(ctx context.Context, in *LispEidTableMapDump) (RPCService_DumpLispEidTableMapClient, error)
	DumpLispEidTableVni(ctx context.Context, in *LispEidTableVniDump) (RPCService_DumpLispEidTableVniClient, error)
	DumpLispLocator(ctx context.Context, in *LispLocatorDump) (RPCService_DumpLispLocatorClient, error)
	DumpLispLocatorSet(ctx context.Context, in *LispLocatorSetDump) (RPCService_DumpLispLocatorSetClient, error)
	DumpLispMapResolver(ctx context.Context, in *LispMapResolverDump) (RPCService_DumpLispMapResolverClient, error)
	DumpLispMapServer(ctx context.Context, in *LispMapServerDump) (RPCService_DumpLispMapServerClient, error)
	LispAddDelAdjacency(ctx context.Context, in *LispAddDelAdjacency) (*LispAddDelAdjacencyReply, error)
	LispAddDelLocalEid(ctx context.Context, in *LispAddDelLocalEid) (*LispAddDelLocalEidReply, error)
	LispAddDelLocator(ctx context.Context, in *LispAddDelLocator) (*LispAddDelLocatorReply, error)
	LispAddDelLocatorSet(ctx context.Context, in *LispAddDelLocatorSet) (*LispAddDelLocatorSetReply, error)
	LispAddDelMapRequestItrRlocs(ctx context.Context, in *LispAddDelMapRequestItrRlocs) (*LispAddDelMapRequestItrRlocsReply, error)
	LispAddDelMapResolver(ctx context.Context, in *LispAddDelMapResolver) (*LispAddDelMapResolverReply, error)
	LispAddDelMapServer(ctx context.Context, in *LispAddDelMapServer) (*LispAddDelMapServerReply, error)
	LispAddDelRemoteMapping(ctx context.Context, in *LispAddDelRemoteMapping) (*LispAddDelRemoteMappingReply, error)
	LispAdjacenciesGet(ctx context.Context, in *LispAdjacenciesGet) (*LispAdjacenciesGetReply, error)
	LispEidTableAddDelMap(ctx context.Context, in *LispEidTableAddDelMap) (*LispEidTableAddDelMapReply, error)
	LispEnableDisable(ctx context.Context, in *LispEnableDisable) (*LispEnableDisableReply, error)
	LispGetMapRequestItrRlocs(ctx context.Context, in *LispGetMapRequestItrRlocs) (*LispGetMapRequestItrRlocsReply, error)
	LispMapRegisterEnableDisable(ctx context.Context, in *LispMapRegisterEnableDisable) (*LispMapRegisterEnableDisableReply, error)
	LispMapRequestMode(ctx context.Context, in *LispMapRequestMode) (*LispMapRequestModeReply, error)
	LispPitrSetLocatorSet(ctx context.Context, in *LispPitrSetLocatorSet) (*LispPitrSetLocatorSetReply, error)
	LispRlocProbeEnableDisable(ctx context.Context, in *LispRlocProbeEnableDisable) (*LispRlocProbeEnableDisableReply, error)
	LispUsePetr(ctx context.Context, in *LispUsePetr) (*LispUsePetrReply, error)
	ShowLispMapRegisterState(ctx context.Context, in *ShowLispMapRegisterState) (*ShowLispMapRegisterStateReply, error)
	ShowLispMapRequestMode(ctx context.Context, in *ShowLispMapRequestMode) (*ShowLispMapRequestModeReply, error)
	ShowLispPitr(ctx context.Context, in *ShowLispPitr) (*ShowLispPitrReply, error)
	ShowLispRlocProbeState(ctx context.Context, in *ShowLispRlocProbeState) (*ShowLispRlocProbeStateReply, error)
	ShowLispStatus(ctx context.Context, in *ShowLispStatus) (*ShowLispStatusReply, error)
	ShowLispUsePetr(ctx context.Context, in *ShowLispUsePetr) (*ShowLispUsePetrReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpLispEidTable(ctx context.Context, in *LispEidTableDump) (RPCService_DumpLispEidTableClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispEidTableClient{stream}
	return x, nil
}

type RPCService_DumpLispEidTableClient interface {
	Recv() (*LispEidTableDetails, error)
}

type serviceClient_DumpLispEidTableClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispEidTableClient) Recv() (*LispEidTableDetails, error) {
	m := new(LispEidTableDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispEidTableMap(ctx context.Context, in *LispEidTableMapDump) (RPCService_DumpLispEidTableMapClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispEidTableMapClient{stream}
	return x, nil
}

type RPCService_DumpLispEidTableMapClient interface {
	Recv() (*LispEidTableMapDetails, error)
}

type serviceClient_DumpLispEidTableMapClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispEidTableMapClient) Recv() (*LispEidTableMapDetails, error) {
	m := new(LispEidTableMapDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispEidTableVni(ctx context.Context, in *LispEidTableVniDump) (RPCService_DumpLispEidTableVniClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispEidTableVniClient{stream}
	return x, nil
}

type RPCService_DumpLispEidTableVniClient interface {
	Recv() (*LispEidTableVniDetails, error)
}

type serviceClient_DumpLispEidTableVniClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispEidTableVniClient) Recv() (*LispEidTableVniDetails, error) {
	m := new(LispEidTableVniDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispLocator(ctx context.Context, in *LispLocatorDump) (RPCService_DumpLispLocatorClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispLocatorClient{stream}
	return x, nil
}

type RPCService_DumpLispLocatorClient interface {
	Recv() (*LispLocatorDetails, error)
}

type serviceClient_DumpLispLocatorClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispLocatorClient) Recv() (*LispLocatorDetails, error) {
	m := new(LispLocatorDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispLocatorSet(ctx context.Context, in *LispLocatorSetDump) (RPCService_DumpLispLocatorSetClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispLocatorSetClient{stream}
	return x, nil
}

type RPCService_DumpLispLocatorSetClient interface {
	Recv() (*LispLocatorSetDetails, error)
}

type serviceClient_DumpLispLocatorSetClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispLocatorSetClient) Recv() (*LispLocatorSetDetails, error) {
	m := new(LispLocatorSetDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispMapResolver(ctx context.Context, in *LispMapResolverDump) (RPCService_DumpLispMapResolverClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispMapResolverClient{stream}
	return x, nil
}

type RPCService_DumpLispMapResolverClient interface {
	Recv() (*LispMapResolverDetails, error)
}

type serviceClient_DumpLispMapResolverClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispMapResolverClient) Recv() (*LispMapResolverDetails, error) {
	m := new(LispMapResolverDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpLispMapServer(ctx context.Context, in *LispMapServerDump) (RPCService_DumpLispMapServerClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpLispMapServerClient{stream}
	return x, nil
}

type RPCService_DumpLispMapServerClient interface {
	Recv() (*LispMapServerDetails, error)
}

type serviceClient_DumpLispMapServerClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpLispMapServerClient) Recv() (*LispMapServerDetails, error) {
	m := new(LispMapServerDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) LispAddDelAdjacency(ctx context.Context, in *LispAddDelAdjacency) (*LispAddDelAdjacencyReply, error) {
	out := new(LispAddDelAdjacencyReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelLocalEid(ctx context.Context, in *LispAddDelLocalEid) (*LispAddDelLocalEidReply, error) {
	out := new(LispAddDelLocalEidReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelLocator(ctx context.Context, in *LispAddDelLocator) (*LispAddDelLocatorReply, error) {
	out := new(LispAddDelLocatorReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelLocatorSet(ctx context.Context, in *LispAddDelLocatorSet) (*LispAddDelLocatorSetReply, error) {
	out := new(LispAddDelLocatorSetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelMapRequestItrRlocs(ctx context.Context, in *LispAddDelMapRequestItrRlocs) (*LispAddDelMapRequestItrRlocsReply, error) {
	out := new(LispAddDelMapRequestItrRlocsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelMapResolver(ctx context.Context, in *LispAddDelMapResolver) (*LispAddDelMapResolverReply, error) {
	out := new(LispAddDelMapResolverReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelMapServer(ctx context.Context, in *LispAddDelMapServer) (*LispAddDelMapServerReply, error) {
	out := new(LispAddDelMapServerReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAddDelRemoteMapping(ctx context.Context, in *LispAddDelRemoteMapping) (*LispAddDelRemoteMappingReply, error) {
	out := new(LispAddDelRemoteMappingReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispAdjacenciesGet(ctx context.Context, in *LispAdjacenciesGet) (*LispAdjacenciesGetReply, error) {
	out := new(LispAdjacenciesGetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispEidTableAddDelMap(ctx context.Context, in *LispEidTableAddDelMap) (*LispEidTableAddDelMapReply, error) {
	out := new(LispEidTableAddDelMapReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispEnableDisable(ctx context.Context, in *LispEnableDisable) (*LispEnableDisableReply, error) {
	out := new(LispEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispGetMapRequestItrRlocs(ctx context.Context, in *LispGetMapRequestItrRlocs) (*LispGetMapRequestItrRlocsReply, error) {
	out := new(LispGetMapRequestItrRlocsReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispMapRegisterEnableDisable(ctx context.Context, in *LispMapRegisterEnableDisable) (*LispMapRegisterEnableDisableReply, error) {
	out := new(LispMapRegisterEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispMapRequestMode(ctx context.Context, in *LispMapRequestMode) (*LispMapRequestModeReply, error) {
	out := new(LispMapRequestModeReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispPitrSetLocatorSet(ctx context.Context, in *LispPitrSetLocatorSet) (*LispPitrSetLocatorSetReply, error) {
	out := new(LispPitrSetLocatorSetReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispRlocProbeEnableDisable(ctx context.Context, in *LispRlocProbeEnableDisable) (*LispRlocProbeEnableDisableReply, error) {
	out := new(LispRlocProbeEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LispUsePetr(ctx context.Context, in *LispUsePetr) (*LispUsePetrReply, error) {
	out := new(LispUsePetrReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispMapRegisterState(ctx context.Context, in *ShowLispMapRegisterState) (*ShowLispMapRegisterStateReply, error) {
	out := new(ShowLispMapRegisterStateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispMapRequestMode(ctx context.Context, in *ShowLispMapRequestMode) (*ShowLispMapRequestModeReply, error) {
	out := new(ShowLispMapRequestModeReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispPitr(ctx context.Context, in *ShowLispPitr) (*ShowLispPitrReply, error) {
	out := new(ShowLispPitrReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispRlocProbeState(ctx context.Context, in *ShowLispRlocProbeState) (*ShowLispRlocProbeStateReply, error) {
	out := new(ShowLispRlocProbeStateReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispStatus(ctx context.Context, in *ShowLispStatus) (*ShowLispStatusReply, error) {
	out := new(ShowLispStatusReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ShowLispUsePetr(ctx context.Context, in *ShowLispUsePetr) (*ShowLispUsePetrReply, error) {
	out := new(ShowLispUsePetrReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
