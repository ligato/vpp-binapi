// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/vpp2005/.vppapi/core/sr.api.json

/*
Package sr is a generated VPP binary API for 'sr' module.

It consists of:
	 13 enums
	  6 aliases
	  7 types
	  1 union
	 20 messages
	 10 services
*/
package sr

import (
	"bytes"
	"context"
	"io"
	"strconv"

	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "sr"
	// APIVersion is the API version of this module.
	APIVersion = "2.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xd85c77ca
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint8

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint8]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint8{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 0
	IF_API_TYPE_SUB      IfType = 1
	IF_API_TYPE_P2P      IfType = 2
	IF_API_TYPE_PIPE     IfType = 3
)

var IfType_name = map[uint32]string{
	0: "IF_API_TYPE_HARDWARE",
	1: "IF_API_TYPE_SUB",
	2: "IF_API_TYPE_P2P",
	3: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 0,
	"IF_API_TYPE_SUB":      1,
	"IF_API_TYPE_P2P":      2,
	"IF_API_TYPE_PIPE":     3,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint8

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_ESP      IPProto = 50
	IP_API_PROTO_AH       IPProto = 51
	IP_API_PROTO_ICMP6    IPProto = 58
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint8]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_ESP",
	51:  "IP_API_PROTO_AH",
	58:  "IP_API_PROTO_ICMP6",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint8{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_ESP":      50,
	"IP_API_PROTO_AH":       51,
	"IP_API_PROTO_ICMP6":    58,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 0
	MTU_PROTO_API_IP4  MtuProto = 1
	MTU_PROTO_API_IP6  MtuProto = 2
	MTU_PROTO_API_MPLS MtuProto = 3
)

var MtuProto_name = map[uint32]string{
	0: "MTU_PROTO_API_L3",
	1: "MTU_PROTO_API_IP4",
	2: "MTU_PROTO_API_IP6",
	3: "MTU_PROTO_API_MPLS",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   0,
	"MTU_PROTO_API_IP4":  1,
	"MTU_PROTO_API_IP6":  2,
	"MTU_PROTO_API_MPLS": 3,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SrBehavior represents VPP binary API enum 'sr_behavior'.
type SrBehavior uint8

const (
	SR_BEHAVIOR_API_END     SrBehavior = 1
	SR_BEHAVIOR_API_X       SrBehavior = 2
	SR_BEHAVIOR_API_T       SrBehavior = 3
	SR_BEHAVIOR_API_D_FIRST SrBehavior = 4
	SR_BEHAVIOR_API_DX2     SrBehavior = 5
	SR_BEHAVIOR_API_DX6     SrBehavior = 6
	SR_BEHAVIOR_API_DX4     SrBehavior = 7
	SR_BEHAVIOR_API_DT6     SrBehavior = 8
	SR_BEHAVIOR_API_DT4     SrBehavior = 9
	SR_BEHAVIOR_API_LAST    SrBehavior = 10
)

var SrBehavior_name = map[uint8]string{
	1:  "SR_BEHAVIOR_API_END",
	2:  "SR_BEHAVIOR_API_X",
	3:  "SR_BEHAVIOR_API_T",
	4:  "SR_BEHAVIOR_API_D_FIRST",
	5:  "SR_BEHAVIOR_API_DX2",
	6:  "SR_BEHAVIOR_API_DX6",
	7:  "SR_BEHAVIOR_API_DX4",
	8:  "SR_BEHAVIOR_API_DT6",
	9:  "SR_BEHAVIOR_API_DT4",
	10: "SR_BEHAVIOR_API_LAST",
}

var SrBehavior_value = map[string]uint8{
	"SR_BEHAVIOR_API_END":     1,
	"SR_BEHAVIOR_API_X":       2,
	"SR_BEHAVIOR_API_T":       3,
	"SR_BEHAVIOR_API_D_FIRST": 4,
	"SR_BEHAVIOR_API_DX2":     5,
	"SR_BEHAVIOR_API_DX6":     6,
	"SR_BEHAVIOR_API_DX4":     7,
	"SR_BEHAVIOR_API_DT6":     8,
	"SR_BEHAVIOR_API_DT4":     9,
	"SR_BEHAVIOR_API_LAST":    10,
}

func (x SrBehavior) String() string {
	s, ok := SrBehavior_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SrPolicyOp represents VPP binary API enum 'sr_policy_op'.
type SrPolicyOp uint8

const (
	SR_POLICY_OP_API_NONE SrPolicyOp = 0
	SR_POLICY_OP_API_ADD  SrPolicyOp = 1
	SR_POLICY_OP_API_DEL  SrPolicyOp = 2
	SR_POLICY_OP_API_MOD  SrPolicyOp = 3
)

var SrPolicyOp_name = map[uint8]string{
	0: "SR_POLICY_OP_API_NONE",
	1: "SR_POLICY_OP_API_ADD",
	2: "SR_POLICY_OP_API_DEL",
	3: "SR_POLICY_OP_API_MOD",
}

var SrPolicyOp_value = map[string]uint8{
	"SR_POLICY_OP_API_NONE": 0,
	"SR_POLICY_OP_API_ADD":  1,
	"SR_POLICY_OP_API_DEL":  2,
	"SR_POLICY_OP_API_MOD":  3,
}

func (x SrPolicyOp) String() string {
	s, ok := SrPolicyOp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SrSteer represents VPP binary API enum 'sr_steer'.
type SrSteer uint8

const (
	SR_STEER_API_L2   SrSteer = 2
	SR_STEER_API_IPV4 SrSteer = 4
	SR_STEER_API_IPV6 SrSteer = 6
)

var SrSteer_name = map[uint8]string{
	2: "SR_STEER_API_L2",
	4: "SR_STEER_API_IPV4",
	6: "SR_STEER_API_IPV6",
}

var SrSteer_value = map[string]uint8{
	"SR_STEER_API_L2":   2,
	"SR_STEER_API_IPV4": 4,
	"SR_STEER_API_IPV6": 6,
}

func (x SrSteer) String() string {
	s, ok := SrSteer_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// AddressWithPrefix represents VPP binary API alias 'address_with_prefix'.
type AddressWithPrefix Prefix

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP4AddressWithPrefix represents VPP binary API alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// IP6AddressWithPrefix represents VPP binary API alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string { return "address" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string { return "ip4_prefix" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string { return "ip6_prefix" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string { return "mprefix" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string { return "prefix" }

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string { return "prefix_matcher" }

// Srv6SidList represents VPP binary API type 'srv6_sid_list'.
type Srv6SidList struct {
	NumSids uint8
	Weight  uint32
	Sids    []IP6Address `struc:"[16]IP6Address"`
}

func (*Srv6SidList) GetTypeName() string { return "srv6_sid_list" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string { return "address_union" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// SrLocalsidAddDel represents VPP binary API message 'sr_localsid_add_del'.
type SrLocalsidAddDel struct {
	IsDel     bool
	Localsid  IP6Address
	EndPsp    bool
	Behavior  SrBehavior
	SwIfIndex InterfaceIndex
	VlanIndex uint32
	FibTable  uint32
	NhAddr    Address
}

func (m *SrLocalsidAddDel) Reset()                        { *m = SrLocalsidAddDel{} }
func (*SrLocalsidAddDel) GetMessageName() string          { return "sr_localsid_add_del" }
func (*SrLocalsidAddDel) GetCrcString() string            { return "26fa3309" }
func (*SrLocalsidAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// SrLocalsidAddDelReply represents VPP binary API message 'sr_localsid_add_del_reply'.
type SrLocalsidAddDelReply struct {
	Retval int32
}

func (m *SrLocalsidAddDelReply) Reset()                        { *m = SrLocalsidAddDelReply{} }
func (*SrLocalsidAddDelReply) GetMessageName() string          { return "sr_localsid_add_del_reply" }
func (*SrLocalsidAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*SrLocalsidAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrLocalsidsDetails represents VPP binary API message 'sr_localsids_details'.
type SrLocalsidsDetails struct {
	Addr                    IP6Address
	EndPsp                  bool
	Behavior                SrBehavior
	FibTable                uint32
	VlanIndex               uint32
	XconnectNhAddr          Address
	XconnectIfaceOrVrfTable uint32
}

func (m *SrLocalsidsDetails) Reset()                        { *m = SrLocalsidsDetails{} }
func (*SrLocalsidsDetails) GetMessageName() string          { return "sr_localsids_details" }
func (*SrLocalsidsDetails) GetCrcString() string            { return "6a6c0265" }
func (*SrLocalsidsDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrLocalsidsDump represents VPP binary API message 'sr_localsids_dump'.
type SrLocalsidsDump struct{}

func (m *SrLocalsidsDump) Reset()                        { *m = SrLocalsidsDump{} }
func (*SrLocalsidsDump) GetMessageName() string          { return "sr_localsids_dump" }
func (*SrLocalsidsDump) GetCrcString() string            { return "51077d14" }
func (*SrLocalsidsDump) GetMessageType() api.MessageType { return api.RequestMessage }

// SrPoliciesDetails represents VPP binary API message 'sr_policies_details'.
type SrPoliciesDetails struct {
	Bsid        IP6Address
	IsSpray     bool
	IsEncap     bool
	FibTable    uint32
	NumSidLists uint8 `struc:"sizeof=SidLists"`
	SidLists    []Srv6SidList
}

func (m *SrPoliciesDetails) Reset()                        { *m = SrPoliciesDetails{} }
func (*SrPoliciesDetails) GetMessageName() string          { return "sr_policies_details" }
func (*SrPoliciesDetails) GetCrcString() string            { return "07ec2d93" }
func (*SrPoliciesDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrPoliciesDump represents VPP binary API message 'sr_policies_dump'.
type SrPoliciesDump struct{}

func (m *SrPoliciesDump) Reset()                        { *m = SrPoliciesDump{} }
func (*SrPoliciesDump) GetMessageName() string          { return "sr_policies_dump" }
func (*SrPoliciesDump) GetCrcString() string            { return "51077d14" }
func (*SrPoliciesDump) GetMessageType() api.MessageType { return api.RequestMessage }

// SrPolicyAdd represents VPP binary API message 'sr_policy_add'.
type SrPolicyAdd struct {
	BsidAddr IP6Address
	Weight   uint32
	IsEncap  bool
	IsSpray  bool
	FibTable uint32
	Sids     Srv6SidList
}

func (m *SrPolicyAdd) Reset()                        { *m = SrPolicyAdd{} }
func (*SrPolicyAdd) GetMessageName() string          { return "sr_policy_add" }
func (*SrPolicyAdd) GetCrcString() string            { return "ec79ee6a" }
func (*SrPolicyAdd) GetMessageType() api.MessageType { return api.RequestMessage }

// SrPolicyAddReply represents VPP binary API message 'sr_policy_add_reply'.
type SrPolicyAddReply struct {
	Retval int32
}

func (m *SrPolicyAddReply) Reset()                        { *m = SrPolicyAddReply{} }
func (*SrPolicyAddReply) GetMessageName() string          { return "sr_policy_add_reply" }
func (*SrPolicyAddReply) GetCrcString() string            { return "e8d4e804" }
func (*SrPolicyAddReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrPolicyDel represents VPP binary API message 'sr_policy_del'.
type SrPolicyDel struct {
	BsidAddr      IP6Address
	SrPolicyIndex uint32
}

func (m *SrPolicyDel) Reset()                        { *m = SrPolicyDel{} }
func (*SrPolicyDel) GetMessageName() string          { return "sr_policy_del" }
func (*SrPolicyDel) GetCrcString() string            { return "cb4d48d5" }
func (*SrPolicyDel) GetMessageType() api.MessageType { return api.RequestMessage }

// SrPolicyDelReply represents VPP binary API message 'sr_policy_del_reply'.
type SrPolicyDelReply struct {
	Retval int32
}

func (m *SrPolicyDelReply) Reset()                        { *m = SrPolicyDelReply{} }
func (*SrPolicyDelReply) GetMessageName() string          { return "sr_policy_del_reply" }
func (*SrPolicyDelReply) GetCrcString() string            { return "e8d4e804" }
func (*SrPolicyDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrPolicyMod represents VPP binary API message 'sr_policy_mod'.
type SrPolicyMod struct {
	BsidAddr      IP6Address
	SrPolicyIndex uint32
	FibTable      uint32
	Operation     SrPolicyOp
	SlIndex       uint32
	Weight        uint32
	Sids          Srv6SidList
}

func (m *SrPolicyMod) Reset()                        { *m = SrPolicyMod{} }
func (*SrPolicyMod) GetMessageName() string          { return "sr_policy_mod" }
func (*SrPolicyMod) GetCrcString() string            { return "e531a102" }
func (*SrPolicyMod) GetMessageType() api.MessageType { return api.RequestMessage }

// SrPolicyModReply represents VPP binary API message 'sr_policy_mod_reply'.
type SrPolicyModReply struct {
	Retval int32
}

func (m *SrPolicyModReply) Reset()                        { *m = SrPolicyModReply{} }
func (*SrPolicyModReply) GetMessageName() string          { return "sr_policy_mod_reply" }
func (*SrPolicyModReply) GetCrcString() string            { return "e8d4e804" }
func (*SrPolicyModReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrSetEncapHopLimit represents VPP binary API message 'sr_set_encap_hop_limit'.
type SrSetEncapHopLimit struct {
	HopLimit uint8
}

func (m *SrSetEncapHopLimit) Reset()                        { *m = SrSetEncapHopLimit{} }
func (*SrSetEncapHopLimit) GetMessageName() string          { return "sr_set_encap_hop_limit" }
func (*SrSetEncapHopLimit) GetCrcString() string            { return "aa75d7d0" }
func (*SrSetEncapHopLimit) GetMessageType() api.MessageType { return api.RequestMessage }

// SrSetEncapHopLimitReply represents VPP binary API message 'sr_set_encap_hop_limit_reply'.
type SrSetEncapHopLimitReply struct {
	Retval int32
}

func (m *SrSetEncapHopLimitReply) Reset()                        { *m = SrSetEncapHopLimitReply{} }
func (*SrSetEncapHopLimitReply) GetMessageName() string          { return "sr_set_encap_hop_limit_reply" }
func (*SrSetEncapHopLimitReply) GetCrcString() string            { return "e8d4e804" }
func (*SrSetEncapHopLimitReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrSetEncapSource represents VPP binary API message 'sr_set_encap_source'.
type SrSetEncapSource struct {
	EncapsSource IP6Address
}

func (m *SrSetEncapSource) Reset()                        { *m = SrSetEncapSource{} }
func (*SrSetEncapSource) GetMessageName() string          { return "sr_set_encap_source" }
func (*SrSetEncapSource) GetCrcString() string            { return "d3bad5e1" }
func (*SrSetEncapSource) GetMessageType() api.MessageType { return api.RequestMessage }

// SrSetEncapSourceReply represents VPP binary API message 'sr_set_encap_source_reply'.
type SrSetEncapSourceReply struct {
	Retval int32
}

func (m *SrSetEncapSourceReply) Reset()                        { *m = SrSetEncapSourceReply{} }
func (*SrSetEncapSourceReply) GetMessageName() string          { return "sr_set_encap_source_reply" }
func (*SrSetEncapSourceReply) GetCrcString() string            { return "e8d4e804" }
func (*SrSetEncapSourceReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrSteeringAddDel represents VPP binary API message 'sr_steering_add_del'.
type SrSteeringAddDel struct {
	IsDel         bool
	BsidAddr      IP6Address
	SrPolicyIndex uint32
	TableID       uint32
	Prefix        Prefix
	SwIfIndex     InterfaceIndex
	TrafficType   SrSteer
}

func (m *SrSteeringAddDel) Reset()                        { *m = SrSteeringAddDel{} }
func (*SrSteeringAddDel) GetMessageName() string          { return "sr_steering_add_del" }
func (*SrSteeringAddDel) GetCrcString() string            { return "3711dace" }
func (*SrSteeringAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// SrSteeringAddDelReply represents VPP binary API message 'sr_steering_add_del_reply'.
type SrSteeringAddDelReply struct {
	Retval int32
}

func (m *SrSteeringAddDelReply) Reset()                        { *m = SrSteeringAddDelReply{} }
func (*SrSteeringAddDelReply) GetMessageName() string          { return "sr_steering_add_del_reply" }
func (*SrSteeringAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*SrSteeringAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrSteeringPolDetails represents VPP binary API message 'sr_steering_pol_details'.
type SrSteeringPolDetails struct {
	TrafficType SrSteer
	FibTable    uint32
	Prefix      Prefix
	SwIfIndex   InterfaceIndex
	Bsid        IP6Address
}

func (m *SrSteeringPolDetails) Reset()                        { *m = SrSteeringPolDetails{} }
func (*SrSteeringPolDetails) GetMessageName() string          { return "sr_steering_pol_details" }
func (*SrSteeringPolDetails) GetCrcString() string            { return "1c1ee786" }
func (*SrSteeringPolDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrSteeringPolDump represents VPP binary API message 'sr_steering_pol_dump'.
type SrSteeringPolDump struct{}

func (m *SrSteeringPolDump) Reset()                        { *m = SrSteeringPolDump{} }
func (*SrSteeringPolDump) GetMessageName() string          { return "sr_steering_pol_dump" }
func (*SrSteeringPolDump) GetCrcString() string            { return "51077d14" }
func (*SrSteeringPolDump) GetMessageType() api.MessageType { return api.RequestMessage }

func init() {
	api.RegisterMessage((*SrLocalsidAddDel)(nil), "sr.SrLocalsidAddDel")
	api.RegisterMessage((*SrLocalsidAddDelReply)(nil), "sr.SrLocalsidAddDelReply")
	api.RegisterMessage((*SrLocalsidsDetails)(nil), "sr.SrLocalsidsDetails")
	api.RegisterMessage((*SrLocalsidsDump)(nil), "sr.SrLocalsidsDump")
	api.RegisterMessage((*SrPoliciesDetails)(nil), "sr.SrPoliciesDetails")
	api.RegisterMessage((*SrPoliciesDump)(nil), "sr.SrPoliciesDump")
	api.RegisterMessage((*SrPolicyAdd)(nil), "sr.SrPolicyAdd")
	api.RegisterMessage((*SrPolicyAddReply)(nil), "sr.SrPolicyAddReply")
	api.RegisterMessage((*SrPolicyDel)(nil), "sr.SrPolicyDel")
	api.RegisterMessage((*SrPolicyDelReply)(nil), "sr.SrPolicyDelReply")
	api.RegisterMessage((*SrPolicyMod)(nil), "sr.SrPolicyMod")
	api.RegisterMessage((*SrPolicyModReply)(nil), "sr.SrPolicyModReply")
	api.RegisterMessage((*SrSetEncapHopLimit)(nil), "sr.SrSetEncapHopLimit")
	api.RegisterMessage((*SrSetEncapHopLimitReply)(nil), "sr.SrSetEncapHopLimitReply")
	api.RegisterMessage((*SrSetEncapSource)(nil), "sr.SrSetEncapSource")
	api.RegisterMessage((*SrSetEncapSourceReply)(nil), "sr.SrSetEncapSourceReply")
	api.RegisterMessage((*SrSteeringAddDel)(nil), "sr.SrSteeringAddDel")
	api.RegisterMessage((*SrSteeringAddDelReply)(nil), "sr.SrSteeringAddDelReply")
	api.RegisterMessage((*SrSteeringPolDetails)(nil), "sr.SrSteeringPolDetails")
	api.RegisterMessage((*SrSteeringPolDump)(nil), "sr.SrSteeringPolDump")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*SrLocalsidAddDel)(nil),
		(*SrLocalsidAddDelReply)(nil),
		(*SrLocalsidsDetails)(nil),
		(*SrLocalsidsDump)(nil),
		(*SrPoliciesDetails)(nil),
		(*SrPoliciesDump)(nil),
		(*SrPolicyAdd)(nil),
		(*SrPolicyAddReply)(nil),
		(*SrPolicyDel)(nil),
		(*SrPolicyDelReply)(nil),
		(*SrPolicyMod)(nil),
		(*SrPolicyModReply)(nil),
		(*SrSetEncapHopLimit)(nil),
		(*SrSetEncapHopLimitReply)(nil),
		(*SrSetEncapSource)(nil),
		(*SrSetEncapSourceReply)(nil),
		(*SrSteeringAddDel)(nil),
		(*SrSteeringAddDelReply)(nil),
		(*SrSteeringPolDetails)(nil),
		(*SrSteeringPolDump)(nil),
	}
}

// RPCService represents RPC service API for sr module.
type RPCService interface {
	DumpSrLocalsids(ctx context.Context, in *SrLocalsidsDump) (RPCService_DumpSrLocalsidsClient, error)
	DumpSrPolicies(ctx context.Context, in *SrPoliciesDump) (RPCService_DumpSrPoliciesClient, error)
	DumpSrSteeringPol(ctx context.Context, in *SrSteeringPolDump) (RPCService_DumpSrSteeringPolClient, error)
	SrLocalsidAddDel(ctx context.Context, in *SrLocalsidAddDel) (*SrLocalsidAddDelReply, error)
	SrPolicyAdd(ctx context.Context, in *SrPolicyAdd) (*SrPolicyAddReply, error)
	SrPolicyDel(ctx context.Context, in *SrPolicyDel) (*SrPolicyDelReply, error)
	SrPolicyMod(ctx context.Context, in *SrPolicyMod) (*SrPolicyModReply, error)
	SrSetEncapHopLimit(ctx context.Context, in *SrSetEncapHopLimit) (*SrSetEncapHopLimitReply, error)
	SrSetEncapSource(ctx context.Context, in *SrSetEncapSource) (*SrSetEncapSourceReply, error)
	SrSteeringAddDel(ctx context.Context, in *SrSteeringAddDel) (*SrSteeringAddDelReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpSrLocalsids(ctx context.Context, in *SrLocalsidsDump) (RPCService_DumpSrLocalsidsClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSrLocalsidsClient{stream}
	return x, nil
}

type RPCService_DumpSrLocalsidsClient interface {
	Recv() (*SrLocalsidsDetails, error)
}

type serviceClient_DumpSrLocalsidsClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSrLocalsidsClient) Recv() (*SrLocalsidsDetails, error) {
	m := new(SrLocalsidsDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpSrPolicies(ctx context.Context, in *SrPoliciesDump) (RPCService_DumpSrPoliciesClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSrPoliciesClient{stream}
	return x, nil
}

type RPCService_DumpSrPoliciesClient interface {
	Recv() (*SrPoliciesDetails, error)
}

type serviceClient_DumpSrPoliciesClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSrPoliciesClient) Recv() (*SrPoliciesDetails, error) {
	m := new(SrPoliciesDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) DumpSrSteeringPol(ctx context.Context, in *SrSteeringPolDump) (RPCService_DumpSrSteeringPolClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSrSteeringPolClient{stream}
	return x, nil
}

type RPCService_DumpSrSteeringPolClient interface {
	Recv() (*SrSteeringPolDetails, error)
}

type serviceClient_DumpSrSteeringPolClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSrSteeringPolClient) Recv() (*SrSteeringPolDetails, error) {
	m := new(SrSteeringPolDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) SrLocalsidAddDel(ctx context.Context, in *SrLocalsidAddDel) (*SrLocalsidAddDelReply, error) {
	out := new(SrLocalsidAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrPolicyAdd(ctx context.Context, in *SrPolicyAdd) (*SrPolicyAddReply, error) {
	out := new(SrPolicyAddReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrPolicyDel(ctx context.Context, in *SrPolicyDel) (*SrPolicyDelReply, error) {
	out := new(SrPolicyDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrPolicyMod(ctx context.Context, in *SrPolicyMod) (*SrPolicyModReply, error) {
	out := new(SrPolicyModReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrSetEncapHopLimit(ctx context.Context, in *SrSetEncapHopLimit) (*SrSetEncapHopLimitReply, error) {
	out := new(SrSetEncapHopLimitReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrSetEncapSource(ctx context.Context, in *SrSetEncapSource) (*SrSetEncapSourceReply, error) {
	out := new(SrSetEncapSourceReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrSteeringAddDel(ctx context.Context, in *SrSteeringAddDel) (*SrSteeringAddDelReply, error) {
	out := new(SrSteeringAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
