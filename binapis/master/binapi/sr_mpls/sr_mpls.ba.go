// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/master/vppapi/core/sr_mpls.api.json

/*
Package sr_mpls is a generated VPP binary API for 'sr_mpls' module.

It consists of:
	 13 enums
	  6 aliases
	  6 types
	  1 union
	 10 messages
	  5 services
*/
package sr_mpls

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "sr_mpls"
	// APIVersion is the API version of this module.
	APIVersion = "3.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xe9337bad
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint8

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint8]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint8{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 1
	IF_API_TYPE_SUB      IfType = 2
	IF_API_TYPE_P2P      IfType = 3
	IF_API_TYPE_PIPE     IfType = 4
)

var IfType_name = map[uint32]string{
	1: "IF_API_TYPE_HARDWARE",
	2: "IF_API_TYPE_SUB",
	3: "IF_API_TYPE_P2P",
	4: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 1,
	"IF_API_TYPE_SUB":      2,
	"IF_API_TYPE_P2P":      3,
	"IF_API_TYPE_PIPE":     4,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint8

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_ESP      IPProto = 50
	IP_API_PROTO_AH       IPProto = 51
	IP_API_PROTO_ICMP6    IPProto = 58
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint8]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_ESP",
	51:  "IP_API_PROTO_AH",
	58:  "IP_API_PROTO_ICMP6",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint8{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_ESP":      50,
	"IP_API_PROTO_AH":       51,
	"IP_API_PROTO_ICMP6":    58,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 1
	MTU_PROTO_API_IP4  MtuProto = 2
	MTU_PROTO_API_IP6  MtuProto = 3
	MTU_PROTO_API_MPLS MtuProto = 4
	MTU_PROTO_API_N    MtuProto = 5
)

var MtuProto_name = map[uint32]string{
	1: "MTU_PROTO_API_L3",
	2: "MTU_PROTO_API_IP4",
	3: "MTU_PROTO_API_IP6",
	4: "MTU_PROTO_API_MPLS",
	5: "MTU_PROTO_API_N",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   1,
	"MTU_PROTO_API_IP4":  2,
	"MTU_PROTO_API_IP6":  3,
	"MTU_PROTO_API_MPLS": 4,
	"MTU_PROTO_API_N":    5,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SrBehavior represents VPP binary API enum 'sr_behavior'.
type SrBehavior uint8

const (
	SR_BEHAVIOR_API_END     SrBehavior = 1
	SR_BEHAVIOR_API_X       SrBehavior = 2
	SR_BEHAVIOR_API_T       SrBehavior = 3
	SR_BEHAVIOR_API_D_FIRST SrBehavior = 4
	SR_BEHAVIOR_API_DX2     SrBehavior = 5
	SR_BEHAVIOR_API_DX6     SrBehavior = 6
	SR_BEHAVIOR_API_DX4     SrBehavior = 7
	SR_BEHAVIOR_API_DT6     SrBehavior = 8
	SR_BEHAVIOR_API_DT4     SrBehavior = 9
	SR_BEHAVIOR_API_LAST    SrBehavior = 10
)

var SrBehavior_name = map[uint8]string{
	1:  "SR_BEHAVIOR_API_END",
	2:  "SR_BEHAVIOR_API_X",
	3:  "SR_BEHAVIOR_API_T",
	4:  "SR_BEHAVIOR_API_D_FIRST",
	5:  "SR_BEHAVIOR_API_DX2",
	6:  "SR_BEHAVIOR_API_DX6",
	7:  "SR_BEHAVIOR_API_DX4",
	8:  "SR_BEHAVIOR_API_DT6",
	9:  "SR_BEHAVIOR_API_DT4",
	10: "SR_BEHAVIOR_API_LAST",
}

var SrBehavior_value = map[string]uint8{
	"SR_BEHAVIOR_API_END":     1,
	"SR_BEHAVIOR_API_X":       2,
	"SR_BEHAVIOR_API_T":       3,
	"SR_BEHAVIOR_API_D_FIRST": 4,
	"SR_BEHAVIOR_API_DX2":     5,
	"SR_BEHAVIOR_API_DX6":     6,
	"SR_BEHAVIOR_API_DX4":     7,
	"SR_BEHAVIOR_API_DT6":     8,
	"SR_BEHAVIOR_API_DT4":     9,
	"SR_BEHAVIOR_API_LAST":    10,
}

func (x SrBehavior) String() string {
	s, ok := SrBehavior_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SrPolicyOp represents VPP binary API enum 'sr_policy_op'.
type SrPolicyOp uint8

const (
	SR_POLICY_OP_API_NONE SrPolicyOp = 0
	SR_POLICY_OP_API_ADD  SrPolicyOp = 1
	SR_POLICY_OP_API_DEL  SrPolicyOp = 2
	SR_POLICY_OP_API_MOD  SrPolicyOp = 3
)

var SrPolicyOp_name = map[uint8]string{
	0: "SR_POLICY_OP_API_NONE",
	1: "SR_POLICY_OP_API_ADD",
	2: "SR_POLICY_OP_API_DEL",
	3: "SR_POLICY_OP_API_MOD",
}

var SrPolicyOp_value = map[string]uint8{
	"SR_POLICY_OP_API_NONE": 0,
	"SR_POLICY_OP_API_ADD":  1,
	"SR_POLICY_OP_API_DEL":  2,
	"SR_POLICY_OP_API_MOD":  3,
}

func (x SrPolicyOp) String() string {
	s, ok := SrPolicyOp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SrSteer represents VPP binary API enum 'sr_steer'.
type SrSteer uint8

const (
	SR_STEER_API_L2   SrSteer = 2
	SR_STEER_API_IPV4 SrSteer = 4
	SR_STEER_API_IPV6 SrSteer = 6
)

var SrSteer_name = map[uint8]string{
	2: "SR_STEER_API_L2",
	4: "SR_STEER_API_IPV4",
	6: "SR_STEER_API_IPV6",
}

var SrSteer_value = map[string]uint8{
	"SR_STEER_API_L2":   2,
	"SR_STEER_API_IPV4": 4,
	"SR_STEER_API_IPV6": 6,
}

func (x SrSteer) String() string {
	s, ok := SrSteer_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// AddressWithPrefix represents VPP binary API alias 'address_with_prefix'.
type AddressWithPrefix Prefix

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP4AddressWithPrefix represents VPP binary API alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// IP6AddressWithPrefix represents VPP binary API alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string { return "address" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string { return "ip4_prefix" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string { return "ip6_prefix" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string { return "mprefix" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string { return "prefix" }

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string { return "prefix_matcher" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string { return "address_union" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// SrMplsPolicyAdd represents VPP binary API message 'sr_mpls_policy_add'.
type SrMplsPolicyAdd struct {
	Bsid      uint32
	Weight    uint32
	IsSpray   bool
	NSegments uint8 `struc:"sizeof=Segments"`
	Segments  []uint32
}

func (m *SrMplsPolicyAdd) Reset()                        { *m = SrMplsPolicyAdd{} }
func (*SrMplsPolicyAdd) GetMessageName() string          { return "sr_mpls_policy_add" }
func (*SrMplsPolicyAdd) GetCrcString() string            { return "a1a70c70" }
func (*SrMplsPolicyAdd) GetMessageType() api.MessageType { return api.RequestMessage }

// SrMplsPolicyAddReply represents VPP binary API message 'sr_mpls_policy_add_reply'.
type SrMplsPolicyAddReply struct {
	Retval int32
}

func (m *SrMplsPolicyAddReply) Reset()                        { *m = SrMplsPolicyAddReply{} }
func (*SrMplsPolicyAddReply) GetMessageName() string          { return "sr_mpls_policy_add_reply" }
func (*SrMplsPolicyAddReply) GetCrcString() string            { return "e8d4e804" }
func (*SrMplsPolicyAddReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrMplsPolicyAssignEndpointColor represents VPP binary API message 'sr_mpls_policy_assign_endpoint_color'.
type SrMplsPolicyAssignEndpointColor struct {
	Bsid     uint32
	Endpoint Address
	Color    uint32
}

func (m *SrMplsPolicyAssignEndpointColor) Reset() { *m = SrMplsPolicyAssignEndpointColor{} }
func (*SrMplsPolicyAssignEndpointColor) GetMessageName() string {
	return "sr_mpls_policy_assign_endpoint_color"
}
func (*SrMplsPolicyAssignEndpointColor) GetCrcString() string            { return "5e1c5c13" }
func (*SrMplsPolicyAssignEndpointColor) GetMessageType() api.MessageType { return api.RequestMessage }

// SrMplsPolicyAssignEndpointColorReply represents VPP binary API message 'sr_mpls_policy_assign_endpoint_color_reply'.
type SrMplsPolicyAssignEndpointColorReply struct {
	Retval int32
}

func (m *SrMplsPolicyAssignEndpointColorReply) Reset() { *m = SrMplsPolicyAssignEndpointColorReply{} }
func (*SrMplsPolicyAssignEndpointColorReply) GetMessageName() string {
	return "sr_mpls_policy_assign_endpoint_color_reply"
}
func (*SrMplsPolicyAssignEndpointColorReply) GetCrcString() string { return "e8d4e804" }
func (*SrMplsPolicyAssignEndpointColorReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// SrMplsPolicyDel represents VPP binary API message 'sr_mpls_policy_del'.
type SrMplsPolicyDel struct {
	Bsid uint32
}

func (m *SrMplsPolicyDel) Reset()                        { *m = SrMplsPolicyDel{} }
func (*SrMplsPolicyDel) GetMessageName() string          { return "sr_mpls_policy_del" }
func (*SrMplsPolicyDel) GetCrcString() string            { return "e29d34fa" }
func (*SrMplsPolicyDel) GetMessageType() api.MessageType { return api.RequestMessage }

// SrMplsPolicyDelReply represents VPP binary API message 'sr_mpls_policy_del_reply'.
type SrMplsPolicyDelReply struct {
	Retval int32
}

func (m *SrMplsPolicyDelReply) Reset()                        { *m = SrMplsPolicyDelReply{} }
func (*SrMplsPolicyDelReply) GetMessageName() string          { return "sr_mpls_policy_del_reply" }
func (*SrMplsPolicyDelReply) GetCrcString() string            { return "e8d4e804" }
func (*SrMplsPolicyDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrMplsPolicyMod represents VPP binary API message 'sr_mpls_policy_mod'.
type SrMplsPolicyMod struct {
	Bsid      uint32
	Operation SrPolicyOp
	SlIndex   uint32
	Weight    uint32
	NSegments uint8 `struc:"sizeof=Segments"`
	Segments  []uint32
}

func (m *SrMplsPolicyMod) Reset()                        { *m = SrMplsPolicyMod{} }
func (*SrMplsPolicyMod) GetMessageName() string          { return "sr_mpls_policy_mod" }
func (*SrMplsPolicyMod) GetCrcString() string            { return "88482c17" }
func (*SrMplsPolicyMod) GetMessageType() api.MessageType { return api.RequestMessage }

// SrMplsPolicyModReply represents VPP binary API message 'sr_mpls_policy_mod_reply'.
type SrMplsPolicyModReply struct {
	Retval int32
}

func (m *SrMplsPolicyModReply) Reset()                        { *m = SrMplsPolicyModReply{} }
func (*SrMplsPolicyModReply) GetMessageName() string          { return "sr_mpls_policy_mod_reply" }
func (*SrMplsPolicyModReply) GetCrcString() string            { return "e8d4e804" }
func (*SrMplsPolicyModReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SrMplsSteeringAddDel represents VPP binary API message 'sr_mpls_steering_add_del'.
type SrMplsSteeringAddDel struct {
	IsDel     bool
	Bsid      uint32
	TableID   uint32
	Prefix    Prefix
	MaskWidth uint32
	NextHop   Address
	Color     uint32
	CoBits    uint8
	VPNLabel  uint32
}

func (m *SrMplsSteeringAddDel) Reset()                        { *m = SrMplsSteeringAddDel{} }
func (*SrMplsSteeringAddDel) GetMessageName() string          { return "sr_mpls_steering_add_del" }
func (*SrMplsSteeringAddDel) GetCrcString() string            { return "7d1b0a0b" }
func (*SrMplsSteeringAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// SrMplsSteeringAddDelReply represents VPP binary API message 'sr_mpls_steering_add_del_reply'.
type SrMplsSteeringAddDelReply struct {
	Retval int32
}

func (m *SrMplsSteeringAddDelReply) Reset()                        { *m = SrMplsSteeringAddDelReply{} }
func (*SrMplsSteeringAddDelReply) GetMessageName() string          { return "sr_mpls_steering_add_del_reply" }
func (*SrMplsSteeringAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*SrMplsSteeringAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func init() {
	api.RegisterMessage((*SrMplsPolicyAdd)(nil), "sr_mpls.SrMplsPolicyAdd")
	api.RegisterMessage((*SrMplsPolicyAddReply)(nil), "sr_mpls.SrMplsPolicyAddReply")
	api.RegisterMessage((*SrMplsPolicyAssignEndpointColor)(nil), "sr_mpls.SrMplsPolicyAssignEndpointColor")
	api.RegisterMessage((*SrMplsPolicyAssignEndpointColorReply)(nil), "sr_mpls.SrMplsPolicyAssignEndpointColorReply")
	api.RegisterMessage((*SrMplsPolicyDel)(nil), "sr_mpls.SrMplsPolicyDel")
	api.RegisterMessage((*SrMplsPolicyDelReply)(nil), "sr_mpls.SrMplsPolicyDelReply")
	api.RegisterMessage((*SrMplsPolicyMod)(nil), "sr_mpls.SrMplsPolicyMod")
	api.RegisterMessage((*SrMplsPolicyModReply)(nil), "sr_mpls.SrMplsPolicyModReply")
	api.RegisterMessage((*SrMplsSteeringAddDel)(nil), "sr_mpls.SrMplsSteeringAddDel")
	api.RegisterMessage((*SrMplsSteeringAddDelReply)(nil), "sr_mpls.SrMplsSteeringAddDelReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*SrMplsPolicyAdd)(nil),
		(*SrMplsPolicyAddReply)(nil),
		(*SrMplsPolicyAssignEndpointColor)(nil),
		(*SrMplsPolicyAssignEndpointColorReply)(nil),
		(*SrMplsPolicyDel)(nil),
		(*SrMplsPolicyDelReply)(nil),
		(*SrMplsPolicyMod)(nil),
		(*SrMplsPolicyModReply)(nil),
		(*SrMplsSteeringAddDel)(nil),
		(*SrMplsSteeringAddDelReply)(nil),
	}
}

// RPCService represents RPC service API for sr_mpls module.
type RPCService interface {
	SrMplsPolicyAdd(ctx context.Context, in *SrMplsPolicyAdd) (*SrMplsPolicyAddReply, error)
	SrMplsPolicyAssignEndpointColor(ctx context.Context, in *SrMplsPolicyAssignEndpointColor) (*SrMplsPolicyAssignEndpointColorReply, error)
	SrMplsPolicyDel(ctx context.Context, in *SrMplsPolicyDel) (*SrMplsPolicyDelReply, error)
	SrMplsPolicyMod(ctx context.Context, in *SrMplsPolicyMod) (*SrMplsPolicyModReply, error)
	SrMplsSteeringAddDel(ctx context.Context, in *SrMplsSteeringAddDel) (*SrMplsSteeringAddDelReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) SrMplsPolicyAdd(ctx context.Context, in *SrMplsPolicyAdd) (*SrMplsPolicyAddReply, error) {
	out := new(SrMplsPolicyAddReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrMplsPolicyAssignEndpointColor(ctx context.Context, in *SrMplsPolicyAssignEndpointColor) (*SrMplsPolicyAssignEndpointColorReply, error) {
	out := new(SrMplsPolicyAssignEndpointColorReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrMplsPolicyDel(ctx context.Context, in *SrMplsPolicyDel) (*SrMplsPolicyDelReply, error) {
	out := new(SrMplsPolicyDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrMplsPolicyMod(ctx context.Context, in *SrMplsPolicyMod) (*SrMplsPolicyModReply, error) {
	out := new(SrMplsPolicyModReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SrMplsSteeringAddDel(ctx context.Context, in *SrMplsSteeringAddDel) (*SrMplsSteeringAddDelReply, error) {
	out := new(SrMplsSteeringAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
