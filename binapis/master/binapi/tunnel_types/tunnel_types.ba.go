// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/master/vppapi/core/tunnel_types.api.json

/*
Package tunnel_types is a generated VPP binary API for 'tunnel_types' module.

It consists of:
	  2 enums
*/
package tunnel_types

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "tunnel_types"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xd5fc612b
)

// TunnelEncapDecapFlags represents VPP binary API enum 'tunnel_encap_decap_flags'.
type TunnelEncapDecapFlags uint8

const (
	TUNNEL_API_ENCAP_DECAP_FLAG_NONE            TunnelEncapDecapFlags = 0
	TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DF   TunnelEncapDecapFlags = 1
	TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_SET_DF    TunnelEncapDecapFlags = 2
	TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DSCP TunnelEncapDecapFlags = 4
	TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_ECN  TunnelEncapDecapFlags = 8
	TUNNEL_API_ENCAP_DECAP_FLAG_DECAP_COPY_ECN  TunnelEncapDecapFlags = 16
)

var TunnelEncapDecapFlags_name = map[uint8]string{
	0:  "TUNNEL_API_ENCAP_DECAP_FLAG_NONE",
	1:  "TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DF",
	2:  "TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_SET_DF",
	4:  "TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DSCP",
	8:  "TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_ECN",
	16: "TUNNEL_API_ENCAP_DECAP_FLAG_DECAP_COPY_ECN",
}

var TunnelEncapDecapFlags_value = map[string]uint8{
	"TUNNEL_API_ENCAP_DECAP_FLAG_NONE":            0,
	"TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DF":   1,
	"TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_SET_DF":    2,
	"TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DSCP": 4,
	"TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_ECN":  8,
	"TUNNEL_API_ENCAP_DECAP_FLAG_DECAP_COPY_ECN":  16,
}

func (x TunnelEncapDecapFlags) String() string {
	s, ok := TunnelEncapDecapFlags_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// TunnelMode represents VPP binary API enum 'tunnel_mode'.
type TunnelMode uint8

const (
	TUNNEL_API_MODE_P2P TunnelMode = 0
	TUNNEL_API_MODE_MP  TunnelMode = 1
)

var TunnelMode_name = map[uint8]string{
	0: "TUNNEL_API_MODE_P2P",
	1: "TUNNEL_API_MODE_MP",
}

var TunnelMode_value = map[string]uint8{
	"TUNNEL_API_MODE_P2P": 0,
	"TUNNEL_API_MODE_MP":  1,
}

func (x TunnelMode) String() string {
	s, ok := TunnelMode_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
