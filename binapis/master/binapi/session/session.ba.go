// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: binapis/master/vppapi/core/session.api.json

/*
Package session is a generated VPP binary API for 'session' module.

It consists of:
	 12 enums
	  6 aliases
	  6 types
	  1 union
	 22 messages
	 11 services
*/
package session

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "session"
	// APIVersion is the API version of this module.
	APIVersion = "3.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0x13cac89b
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint8

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint8]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint8{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var IfStatusFlags_name = map[uint32]string{
	1: "IF_STATUS_API_FLAG_ADMIN_UP",
	2: "IF_STATUS_API_FLAG_LINK_UP",
}

var IfStatusFlags_value = map[string]uint32{
	"IF_STATUS_API_FLAG_ADMIN_UP": 1,
	"IF_STATUS_API_FLAG_LINK_UP":  2,
}

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 1
	IF_API_TYPE_SUB      IfType = 2
	IF_API_TYPE_P2P      IfType = 3
	IF_API_TYPE_PIPE     IfType = 4
)

var IfType_name = map[uint32]string{
	1: "IF_API_TYPE_HARDWARE",
	2: "IF_API_TYPE_SUB",
	3: "IF_API_TYPE_P2P",
	4: "IF_API_TYPE_PIPE",
}

var IfType_value = map[string]uint32{
	"IF_API_TYPE_HARDWARE": 1,
	"IF_API_TYPE_SUB":      2,
	"IF_API_TYPE_P2P":      3,
	"IF_API_TYPE_PIPE":     4,
}

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPDscp represents VPP binary API enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var IPDscp_name = map[uint8]string{
	0:  "IP_API_DSCP_CS0",
	8:  "IP_API_DSCP_CS1",
	10: "IP_API_DSCP_AF11",
	12: "IP_API_DSCP_AF12",
	14: "IP_API_DSCP_AF13",
	16: "IP_API_DSCP_CS2",
	18: "IP_API_DSCP_AF21",
	20: "IP_API_DSCP_AF22",
	22: "IP_API_DSCP_AF23",
	24: "IP_API_DSCP_CS3",
	26: "IP_API_DSCP_AF31",
	28: "IP_API_DSCP_AF32",
	30: "IP_API_DSCP_AF33",
	32: "IP_API_DSCP_CS4",
	34: "IP_API_DSCP_AF41",
	36: "IP_API_DSCP_AF42",
	38: "IP_API_DSCP_AF43",
	40: "IP_API_DSCP_CS5",
	46: "IP_API_DSCP_EF",
	48: "IP_API_DSCP_CS6",
	50: "IP_API_DSCP_CS7",
}

var IPDscp_value = map[string]uint8{
	"IP_API_DSCP_CS0":  0,
	"IP_API_DSCP_CS1":  8,
	"IP_API_DSCP_AF11": 10,
	"IP_API_DSCP_AF12": 12,
	"IP_API_DSCP_AF13": 14,
	"IP_API_DSCP_CS2":  16,
	"IP_API_DSCP_AF21": 18,
	"IP_API_DSCP_AF22": 20,
	"IP_API_DSCP_AF23": 22,
	"IP_API_DSCP_CS3":  24,
	"IP_API_DSCP_AF31": 26,
	"IP_API_DSCP_AF32": 28,
	"IP_API_DSCP_AF33": 30,
	"IP_API_DSCP_CS4":  32,
	"IP_API_DSCP_AF41": 34,
	"IP_API_DSCP_AF42": 36,
	"IP_API_DSCP_AF43": 38,
	"IP_API_DSCP_CS5":  40,
	"IP_API_DSCP_EF":   46,
	"IP_API_DSCP_CS6":  48,
	"IP_API_DSCP_CS7":  50,
}

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPEcn represents VPP binary API enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var IPEcn_name = map[uint8]string{
	0: "IP_API_ECN_NONE",
	1: "IP_API_ECN_ECT0",
	2: "IP_API_ECN_ECT1",
	3: "IP_API_ECN_CE",
}

var IPEcn_value = map[string]uint8{
	"IP_API_ECN_NONE": 0,
	"IP_API_ECN_ECT0": 1,
	"IP_API_ECN_ECT1": 2,
	"IP_API_ECN_CE":   3,
}

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint8

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_ESP      IPProto = 50
	IP_API_PROTO_AH       IPProto = 51
	IP_API_PROTO_ICMP6    IPProto = 58
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var IPProto_name = map[uint8]string{
	0:   "IP_API_PROTO_HOPOPT",
	1:   "IP_API_PROTO_ICMP",
	2:   "IP_API_PROTO_IGMP",
	6:   "IP_API_PROTO_TCP",
	17:  "IP_API_PROTO_UDP",
	47:  "IP_API_PROTO_GRE",
	50:  "IP_API_PROTO_ESP",
	51:  "IP_API_PROTO_AH",
	58:  "IP_API_PROTO_ICMP6",
	88:  "IP_API_PROTO_EIGRP",
	89:  "IP_API_PROTO_OSPF",
	132: "IP_API_PROTO_SCTP",
	255: "IP_API_PROTO_RESERVED",
}

var IPProto_value = map[string]uint8{
	"IP_API_PROTO_HOPOPT":   0,
	"IP_API_PROTO_ICMP":     1,
	"IP_API_PROTO_IGMP":     2,
	"IP_API_PROTO_TCP":      6,
	"IP_API_PROTO_UDP":      17,
	"IP_API_PROTO_GRE":      47,
	"IP_API_PROTO_ESP":      50,
	"IP_API_PROTO_AH":       51,
	"IP_API_PROTO_ICMP6":    58,
	"IP_API_PROTO_EIGRP":    88,
	"IP_API_PROTO_OSPF":     89,
	"IP_API_PROTO_SCTP":     132,
	"IP_API_PROTO_RESERVED": 255,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var LinkDuplex_name = map[uint32]string{
	0: "LINK_DUPLEX_API_UNKNOWN",
	1: "LINK_DUPLEX_API_HALF",
	2: "LINK_DUPLEX_API_FULL",
}

var LinkDuplex_value = map[string]uint32{
	"LINK_DUPLEX_API_UNKNOWN": 0,
	"LINK_DUPLEX_API_HALF":    1,
	"LINK_DUPLEX_API_FULL":    2,
}

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 1
	MTU_PROTO_API_IP4  MtuProto = 2
	MTU_PROTO_API_IP6  MtuProto = 3
	MTU_PROTO_API_MPLS MtuProto = 4
	MTU_PROTO_API_N    MtuProto = 5
)

var MtuProto_name = map[uint32]string{
	1: "MTU_PROTO_API_L3",
	2: "MTU_PROTO_API_IP4",
	3: "MTU_PROTO_API_IP6",
	4: "MTU_PROTO_API_MPLS",
	5: "MTU_PROTO_API_N",
}

var MtuProto_value = map[string]uint32{
	"MTU_PROTO_API_L3":   1,
	"MTU_PROTO_API_IP4":  2,
	"MTU_PROTO_API_IP6":  3,
	"MTU_PROTO_API_MPLS": 4,
	"MTU_PROTO_API_N":    5,
}

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var RxMode_name = map[uint32]string{
	0: "RX_MODE_API_UNKNOWN",
	1: "RX_MODE_API_POLLING",
	2: "RX_MODE_API_INTERRUPT",
	3: "RX_MODE_API_ADAPTIVE",
	4: "RX_MODE_API_DEFAULT",
}

var RxMode_value = map[string]uint32{
	"RX_MODE_API_UNKNOWN":   0,
	"RX_MODE_API_POLLING":   1,
	"RX_MODE_API_INTERRUPT": 2,
	"RX_MODE_API_ADAPTIVE":  3,
	"RX_MODE_API_DEFAULT":   4,
}

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SessionRuleScope represents VPP binary API enum 'session_rule_scope'.
type SessionRuleScope uint32

const (
	SESSION_RULE_SCOPE_API_GLOBAL SessionRuleScope = 0
	SESSION_RULE_SCOPE_API_LOCAL  SessionRuleScope = 1
	SESSION_RULE_SCOPE_API_BOTH   SessionRuleScope = 2
)

var SessionRuleScope_name = map[uint32]string{
	0: "SESSION_RULE_SCOPE_API_GLOBAL",
	1: "SESSION_RULE_SCOPE_API_LOCAL",
	2: "SESSION_RULE_SCOPE_API_BOTH",
}

var SessionRuleScope_value = map[string]uint32{
	"SESSION_RULE_SCOPE_API_GLOBAL": 0,
	"SESSION_RULE_SCOPE_API_LOCAL":  1,
	"SESSION_RULE_SCOPE_API_BOTH":   2,
}

func (x SessionRuleScope) String() string {
	s, ok := SessionRuleScope_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var SubIfFlags_name = map[uint32]string{
	1:   "SUB_IF_API_FLAG_NO_TAGS",
	2:   "SUB_IF_API_FLAG_ONE_TAG",
	4:   "SUB_IF_API_FLAG_TWO_TAGS",
	8:   "SUB_IF_API_FLAG_DOT1AD",
	16:  "SUB_IF_API_FLAG_EXACT_MATCH",
	32:  "SUB_IF_API_FLAG_DEFAULT",
	64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
	128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
	254: "SUB_IF_API_FLAG_MASK_VNET",
	256: "SUB_IF_API_FLAG_DOT1AH",
}

var SubIfFlags_value = map[string]uint32{
	"SUB_IF_API_FLAG_NO_TAGS":           1,
	"SUB_IF_API_FLAG_ONE_TAG":           2,
	"SUB_IF_API_FLAG_TWO_TAGS":          4,
	"SUB_IF_API_FLAG_DOT1AD":            8,
	"SUB_IF_API_FLAG_EXACT_MATCH":       16,
	"SUB_IF_API_FLAG_DEFAULT":           32,
	"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
	"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
	"SUB_IF_API_FLAG_MASK_VNET":         254,
	"SUB_IF_API_FLAG_DOT1AH":            256,
}

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// TransportProto represents VPP binary API enum 'transport_proto'.
type TransportProto uint8

const (
	TRANSPORT_PROTO_API_TCP  TransportProto = 1
	TRANSPORT_PROTO_API_UDP  TransportProto = 2
	TRANSPORT_PROTO_API_NONE TransportProto = 3
	TRANSPORT_PROTO_API_TLS  TransportProto = 4
	TRANSPORT_PROTO_API_UDPC TransportProto = 5
	TRANSPORT_PROTO_API_QUIC TransportProto = 6
)

var TransportProto_name = map[uint8]string{
	1: "TRANSPORT_PROTO_API_TCP",
	2: "TRANSPORT_PROTO_API_UDP",
	3: "TRANSPORT_PROTO_API_NONE",
	4: "TRANSPORT_PROTO_API_TLS",
	5: "TRANSPORT_PROTO_API_UDPC",
	6: "TRANSPORT_PROTO_API_QUIC",
}

var TransportProto_value = map[string]uint8{
	"TRANSPORT_PROTO_API_TCP":  1,
	"TRANSPORT_PROTO_API_UDP":  2,
	"TRANSPORT_PROTO_API_NONE": 3,
	"TRANSPORT_PROTO_API_TLS":  4,
	"TRANSPORT_PROTO_API_UDPC": 5,
	"TRANSPORT_PROTO_API_QUIC": 6,
}

func (x TransportProto) String() string {
	s, ok := TransportProto_name[uint8(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// AddressWithPrefix represents VPP binary API alias 'address_with_prefix'.
type AddressWithPrefix Prefix

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP4AddressWithPrefix represents VPP binary API alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// IP6AddressWithPrefix represents VPP binary API alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string { return "address" }

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string { return "ip4_prefix" }

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string { return "ip6_prefix" }

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string { return "mprefix" }

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string { return "prefix" }

// PrefixMatcher represents VPP binary API type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8
	Ge uint8
}

func (*PrefixMatcher) GetTypeName() string { return "prefix_matcher" }

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string { return "address_union" }

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// AppAddCertKeyPair represents VPP binary API message 'app_add_cert_key_pair'.
type AppAddCertKeyPair struct {
	CertLen    uint16
	CertkeyLen uint16 `struc:"sizeof=Certkey"`
	Certkey    []byte
}

func (m *AppAddCertKeyPair) Reset()                        { *m = AppAddCertKeyPair{} }
func (*AppAddCertKeyPair) GetMessageName() string          { return "app_add_cert_key_pair" }
func (*AppAddCertKeyPair) GetCrcString() string            { return "02eb8016" }
func (*AppAddCertKeyPair) GetMessageType() api.MessageType { return api.RequestMessage }

// AppAddCertKeyPairReply represents VPP binary API message 'app_add_cert_key_pair_reply'.
type AppAddCertKeyPairReply struct {
	Retval int32
	Index  uint32
}

func (m *AppAddCertKeyPairReply) Reset()                        { *m = AppAddCertKeyPairReply{} }
func (*AppAddCertKeyPairReply) GetMessageName() string          { return "app_add_cert_key_pair_reply" }
func (*AppAddCertKeyPairReply) GetCrcString() string            { return "b42958d0" }
func (*AppAddCertKeyPairReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// AppAttach represents VPP binary API message 'app_attach'.
type AppAttach struct {
	Options            []uint64 `struc:"[17]uint64"`
	XXX_NamespaceIDLen uint32   `struc:"sizeof=NamespaceID"`
	NamespaceID        string
}

func (m *AppAttach) Reset()                        { *m = AppAttach{} }
func (*AppAttach) GetMessageName() string          { return "app_attach" }
func (*AppAttach) GetCrcString() string            { return "b3e932af" }
func (*AppAttach) GetMessageType() api.MessageType { return api.RequestMessage }

// AppAttachReply represents VPP binary API message 'app_attach_reply'.
type AppAttachReply struct {
	Retval             int32
	AppMq              uint64
	VppCtrlMq          uint64
	VppCtrlMqThread    uint8
	AppIndex           uint32
	NFds               uint8
	FdFlags            uint8
	SegmentSize        uint32
	SegmentHandle      uint64
	XXX_SegmentNameLen uint32 `struc:"sizeof=SegmentName"`
	SegmentName        string
}

func (m *AppAttachReply) Reset()                        { *m = AppAttachReply{} }
func (*AppAttachReply) GetMessageName() string          { return "app_attach_reply" }
func (*AppAttachReply) GetCrcString() string            { return "5c89c3b0" }
func (*AppAttachReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// AppDelCertKeyPair represents VPP binary API message 'app_del_cert_key_pair'.
type AppDelCertKeyPair struct {
	Index uint32
}

func (m *AppDelCertKeyPair) Reset()                        { *m = AppDelCertKeyPair{} }
func (*AppDelCertKeyPair) GetMessageName() string          { return "app_del_cert_key_pair" }
func (*AppDelCertKeyPair) GetCrcString() string            { return "8ac76db6" }
func (*AppDelCertKeyPair) GetMessageType() api.MessageType { return api.RequestMessage }

// AppDelCertKeyPairReply represents VPP binary API message 'app_del_cert_key_pair_reply'.
type AppDelCertKeyPairReply struct {
	Retval int32
}

func (m *AppDelCertKeyPairReply) Reset()                        { *m = AppDelCertKeyPairReply{} }
func (*AppDelCertKeyPairReply) GetMessageName() string          { return "app_del_cert_key_pair_reply" }
func (*AppDelCertKeyPairReply) GetCrcString() string            { return "e8d4e804" }
func (*AppDelCertKeyPairReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// AppNamespaceAddDel represents VPP binary API message 'app_namespace_add_del'.
type AppNamespaceAddDel struct {
	Secret             uint64
	SwIfIndex          InterfaceIndex
	IP4FibID           uint32
	IP6FibID           uint32
	XXX_NamespaceIDLen uint32 `struc:"sizeof=NamespaceID"`
	NamespaceID        string
}

func (m *AppNamespaceAddDel) Reset()                        { *m = AppNamespaceAddDel{} }
func (*AppNamespaceAddDel) GetMessageName() string          { return "app_namespace_add_del" }
func (*AppNamespaceAddDel) GetCrcString() string            { return "6306aecb" }
func (*AppNamespaceAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// AppNamespaceAddDelReply represents VPP binary API message 'app_namespace_add_del_reply'.
type AppNamespaceAddDelReply struct {
	Retval     int32
	AppnsIndex uint32
}

func (m *AppNamespaceAddDelReply) Reset()                        { *m = AppNamespaceAddDelReply{} }
func (*AppNamespaceAddDelReply) GetMessageName() string          { return "app_namespace_add_del_reply" }
func (*AppNamespaceAddDelReply) GetCrcString() string            { return "85137120" }
func (*AppNamespaceAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// AppWorkerAddDel represents VPP binary API message 'app_worker_add_del'.
type AppWorkerAddDel struct {
	AppIndex uint32
	WrkIndex uint32
	IsAdd    bool
}

func (m *AppWorkerAddDel) Reset()                        { *m = AppWorkerAddDel{} }
func (*AppWorkerAddDel) GetMessageName() string          { return "app_worker_add_del" }
func (*AppWorkerAddDel) GetCrcString() string            { return "753253dc" }
func (*AppWorkerAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// AppWorkerAddDelReply represents VPP binary API message 'app_worker_add_del_reply'.
type AppWorkerAddDelReply struct {
	Retval               int32
	WrkIndex             uint32
	AppEventQueueAddress uint64
	NFds                 uint8
	FdFlags              uint8
	SegmentHandle        uint64
	IsAdd                bool
	XXX_SegmentNameLen   uint32 `struc:"sizeof=SegmentName"`
	SegmentName          string
}

func (m *AppWorkerAddDelReply) Reset()                        { *m = AppWorkerAddDelReply{} }
func (*AppWorkerAddDelReply) GetMessageName() string          { return "app_worker_add_del_reply" }
func (*AppWorkerAddDelReply) GetCrcString() string            { return "5735ffe7" }
func (*AppWorkerAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ApplicationDetach represents VPP binary API message 'application_detach'.
type ApplicationDetach struct{}

func (m *ApplicationDetach) Reset()                        { *m = ApplicationDetach{} }
func (*ApplicationDetach) GetMessageName() string          { return "application_detach" }
func (*ApplicationDetach) GetCrcString() string            { return "51077d14" }
func (*ApplicationDetach) GetMessageType() api.MessageType { return api.RequestMessage }

// ApplicationDetachReply represents VPP binary API message 'application_detach_reply'.
type ApplicationDetachReply struct {
	Retval int32
}

func (m *ApplicationDetachReply) Reset()                        { *m = ApplicationDetachReply{} }
func (*ApplicationDetachReply) GetMessageName() string          { return "application_detach_reply" }
func (*ApplicationDetachReply) GetCrcString() string            { return "e8d4e804" }
func (*ApplicationDetachReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ApplicationTLSCertAdd represents VPP binary API message 'application_tls_cert_add'.
type ApplicationTLSCertAdd struct {
	AppIndex uint32
	CertLen  uint16 `struc:"sizeof=Cert"`
	Cert     []byte
}

func (m *ApplicationTLSCertAdd) Reset()                        { *m = ApplicationTLSCertAdd{} }
func (*ApplicationTLSCertAdd) GetMessageName() string          { return "application_tls_cert_add" }
func (*ApplicationTLSCertAdd) GetCrcString() string            { return "3f5cfe45" }
func (*ApplicationTLSCertAdd) GetMessageType() api.MessageType { return api.RequestMessage }

// ApplicationTLSCertAddReply represents VPP binary API message 'application_tls_cert_add_reply'.
type ApplicationTLSCertAddReply struct {
	Retval int32
}

func (m *ApplicationTLSCertAddReply) Reset()                        { *m = ApplicationTLSCertAddReply{} }
func (*ApplicationTLSCertAddReply) GetMessageName() string          { return "application_tls_cert_add_reply" }
func (*ApplicationTLSCertAddReply) GetCrcString() string            { return "e8d4e804" }
func (*ApplicationTLSCertAddReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// ApplicationTLSKeyAdd represents VPP binary API message 'application_tls_key_add'.
type ApplicationTLSKeyAdd struct {
	AppIndex uint32
	KeyLen   uint16 `struc:"sizeof=Key"`
	Key      []byte
}

func (m *ApplicationTLSKeyAdd) Reset()                        { *m = ApplicationTLSKeyAdd{} }
func (*ApplicationTLSKeyAdd) GetMessageName() string          { return "application_tls_key_add" }
func (*ApplicationTLSKeyAdd) GetCrcString() string            { return "5eaf70cd" }
func (*ApplicationTLSKeyAdd) GetMessageType() api.MessageType { return api.RequestMessage }

// ApplicationTLSKeyAddReply represents VPP binary API message 'application_tls_key_add_reply'.
type ApplicationTLSKeyAddReply struct {
	Retval int32
}

func (m *ApplicationTLSKeyAddReply) Reset()                        { *m = ApplicationTLSKeyAddReply{} }
func (*ApplicationTLSKeyAddReply) GetMessageName() string          { return "application_tls_key_add_reply" }
func (*ApplicationTLSKeyAddReply) GetCrcString() string            { return "e8d4e804" }
func (*ApplicationTLSKeyAddReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SessionEnableDisable represents VPP binary API message 'session_enable_disable'.
type SessionEnableDisable struct {
	IsEnable bool
}

func (m *SessionEnableDisable) Reset()                        { *m = SessionEnableDisable{} }
func (*SessionEnableDisable) GetMessageName() string          { return "session_enable_disable" }
func (*SessionEnableDisable) GetCrcString() string            { return "c264d7bf" }
func (*SessionEnableDisable) GetMessageType() api.MessageType { return api.RequestMessage }

// SessionEnableDisableReply represents VPP binary API message 'session_enable_disable_reply'.
type SessionEnableDisableReply struct {
	Retval int32
}

func (m *SessionEnableDisableReply) Reset()                        { *m = SessionEnableDisableReply{} }
func (*SessionEnableDisableReply) GetMessageName() string          { return "session_enable_disable_reply" }
func (*SessionEnableDisableReply) GetCrcString() string            { return "e8d4e804" }
func (*SessionEnableDisableReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SessionRuleAddDel represents VPP binary API message 'session_rule_add_del'.
type SessionRuleAddDel struct {
	TransportProto TransportProto
	Lcl            Prefix
	Rmt            Prefix
	LclPort        uint16
	RmtPort        uint16
	ActionIndex    uint32
	IsAdd          bool
	AppnsIndex     uint32
	Scope          SessionRuleScope
	Tag            string `struc:"[64]byte"`
}

func (m *SessionRuleAddDel) Reset()                        { *m = SessionRuleAddDel{} }
func (*SessionRuleAddDel) GetMessageName() string          { return "session_rule_add_del" }
func (*SessionRuleAddDel) GetCrcString() string            { return "01117f59" }
func (*SessionRuleAddDel) GetMessageType() api.MessageType { return api.RequestMessage }

// SessionRuleAddDelReply represents VPP binary API message 'session_rule_add_del_reply'.
type SessionRuleAddDelReply struct {
	Retval int32
}

func (m *SessionRuleAddDelReply) Reset()                        { *m = SessionRuleAddDelReply{} }
func (*SessionRuleAddDelReply) GetMessageName() string          { return "session_rule_add_del_reply" }
func (*SessionRuleAddDelReply) GetCrcString() string            { return "e8d4e804" }
func (*SessionRuleAddDelReply) GetMessageType() api.MessageType { return api.ReplyMessage }

// SessionRulesDetails represents VPP binary API message 'session_rules_details'.
type SessionRulesDetails struct {
	TransportProto TransportProto
	Lcl            Prefix
	Rmt            Prefix
	LclPort        uint16
	RmtPort        uint16
	ActionIndex    uint32
	AppnsIndex     uint32
	Scope          SessionRuleScope
	Tag            string `struc:"[64]byte"`
}

func (m *SessionRulesDetails) Reset()                        { *m = SessionRulesDetails{} }
func (*SessionRulesDetails) GetMessageName() string          { return "session_rules_details" }
func (*SessionRulesDetails) GetCrcString() string            { return "d461c4d9" }
func (*SessionRulesDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

// SessionRulesDump represents VPP binary API message 'session_rules_dump'.
type SessionRulesDump struct{}

func (m *SessionRulesDump) Reset()                        { *m = SessionRulesDump{} }
func (*SessionRulesDump) GetMessageName() string          { return "session_rules_dump" }
func (*SessionRulesDump) GetCrcString() string            { return "51077d14" }
func (*SessionRulesDump) GetMessageType() api.MessageType { return api.RequestMessage }

func init() {
	api.RegisterMessage((*AppAddCertKeyPair)(nil), "session.AppAddCertKeyPair")
	api.RegisterMessage((*AppAddCertKeyPairReply)(nil), "session.AppAddCertKeyPairReply")
	api.RegisterMessage((*AppAttach)(nil), "session.AppAttach")
	api.RegisterMessage((*AppAttachReply)(nil), "session.AppAttachReply")
	api.RegisterMessage((*AppDelCertKeyPair)(nil), "session.AppDelCertKeyPair")
	api.RegisterMessage((*AppDelCertKeyPairReply)(nil), "session.AppDelCertKeyPairReply")
	api.RegisterMessage((*AppNamespaceAddDel)(nil), "session.AppNamespaceAddDel")
	api.RegisterMessage((*AppNamespaceAddDelReply)(nil), "session.AppNamespaceAddDelReply")
	api.RegisterMessage((*AppWorkerAddDel)(nil), "session.AppWorkerAddDel")
	api.RegisterMessage((*AppWorkerAddDelReply)(nil), "session.AppWorkerAddDelReply")
	api.RegisterMessage((*ApplicationDetach)(nil), "session.ApplicationDetach")
	api.RegisterMessage((*ApplicationDetachReply)(nil), "session.ApplicationDetachReply")
	api.RegisterMessage((*ApplicationTLSCertAdd)(nil), "session.ApplicationTLSCertAdd")
	api.RegisterMessage((*ApplicationTLSCertAddReply)(nil), "session.ApplicationTLSCertAddReply")
	api.RegisterMessage((*ApplicationTLSKeyAdd)(nil), "session.ApplicationTLSKeyAdd")
	api.RegisterMessage((*ApplicationTLSKeyAddReply)(nil), "session.ApplicationTLSKeyAddReply")
	api.RegisterMessage((*SessionEnableDisable)(nil), "session.SessionEnableDisable")
	api.RegisterMessage((*SessionEnableDisableReply)(nil), "session.SessionEnableDisableReply")
	api.RegisterMessage((*SessionRuleAddDel)(nil), "session.SessionRuleAddDel")
	api.RegisterMessage((*SessionRuleAddDelReply)(nil), "session.SessionRuleAddDelReply")
	api.RegisterMessage((*SessionRulesDetails)(nil), "session.SessionRulesDetails")
	api.RegisterMessage((*SessionRulesDump)(nil), "session.SessionRulesDump")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*AppAddCertKeyPair)(nil),
		(*AppAddCertKeyPairReply)(nil),
		(*AppAttach)(nil),
		(*AppAttachReply)(nil),
		(*AppDelCertKeyPair)(nil),
		(*AppDelCertKeyPairReply)(nil),
		(*AppNamespaceAddDel)(nil),
		(*AppNamespaceAddDelReply)(nil),
		(*AppWorkerAddDel)(nil),
		(*AppWorkerAddDelReply)(nil),
		(*ApplicationDetach)(nil),
		(*ApplicationDetachReply)(nil),
		(*ApplicationTLSCertAdd)(nil),
		(*ApplicationTLSCertAddReply)(nil),
		(*ApplicationTLSKeyAdd)(nil),
		(*ApplicationTLSKeyAddReply)(nil),
		(*SessionEnableDisable)(nil),
		(*SessionEnableDisableReply)(nil),
		(*SessionRuleAddDel)(nil),
		(*SessionRuleAddDelReply)(nil),
		(*SessionRulesDetails)(nil),
		(*SessionRulesDump)(nil),
	}
}

// RPCService represents RPC service API for session module.
type RPCService interface {
	DumpSessionRules(ctx context.Context, in *SessionRulesDump) (RPCService_DumpSessionRulesClient, error)
	AppAddCertKeyPair(ctx context.Context, in *AppAddCertKeyPair) (*AppAddCertKeyPairReply, error)
	AppAttach(ctx context.Context, in *AppAttach) (*AppAttachReply, error)
	AppDelCertKeyPair(ctx context.Context, in *AppDelCertKeyPair) (*AppDelCertKeyPairReply, error)
	AppNamespaceAddDel(ctx context.Context, in *AppNamespaceAddDel) (*AppNamespaceAddDelReply, error)
	AppWorkerAddDel(ctx context.Context, in *AppWorkerAddDel) (*AppWorkerAddDelReply, error)
	ApplicationDetach(ctx context.Context, in *ApplicationDetach) (*ApplicationDetachReply, error)
	ApplicationTLSCertAdd(ctx context.Context, in *ApplicationTLSCertAdd) (*ApplicationTLSCertAddReply, error)
	ApplicationTLSKeyAdd(ctx context.Context, in *ApplicationTLSKeyAdd) (*ApplicationTLSKeyAddReply, error)
	SessionEnableDisable(ctx context.Context, in *SessionEnableDisable) (*SessionEnableDisableReply, error)
	SessionRuleAddDel(ctx context.Context, in *SessionRuleAddDel) (*SessionRuleAddDelReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpSessionRules(ctx context.Context, in *SessionRulesDump) (RPCService_DumpSessionRulesClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpSessionRulesClient{stream}
	return x, nil
}

type RPCService_DumpSessionRulesClient interface {
	Recv() (*SessionRulesDetails, error)
}

type serviceClient_DumpSessionRulesClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpSessionRulesClient) Recv() (*SessionRulesDetails, error) {
	m := new(SessionRulesDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) AppAddCertKeyPair(ctx context.Context, in *AppAddCertKeyPair) (*AppAddCertKeyPairReply, error) {
	out := new(AppAddCertKeyPairReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AppAttach(ctx context.Context, in *AppAttach) (*AppAttachReply, error) {
	out := new(AppAttachReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AppDelCertKeyPair(ctx context.Context, in *AppDelCertKeyPair) (*AppDelCertKeyPairReply, error) {
	out := new(AppDelCertKeyPairReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AppNamespaceAddDel(ctx context.Context, in *AppNamespaceAddDel) (*AppNamespaceAddDelReply, error) {
	out := new(AppNamespaceAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AppWorkerAddDel(ctx context.Context, in *AppWorkerAddDel) (*AppWorkerAddDelReply, error) {
	out := new(AppWorkerAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ApplicationDetach(ctx context.Context, in *ApplicationDetach) (*ApplicationDetachReply, error) {
	out := new(ApplicationDetachReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ApplicationTLSCertAdd(ctx context.Context, in *ApplicationTLSCertAdd) (*ApplicationTLSCertAddReply, error) {
	out := new(ApplicationTLSCertAddReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ApplicationTLSKeyAdd(ctx context.Context, in *ApplicationTLSKeyAdd) (*ApplicationTLSKeyAddReply, error) {
	out := new(ApplicationTLSKeyAddReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SessionEnableDisable(ctx context.Context, in *SessionEnableDisable) (*SessionEnableDisableReply, error) {
	out := new(SessionEnableDisableReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SessionRuleAddDel(ctx context.Context, in *SessionRuleAddDel) (*SessionRuleAddDelReply, error) {
	out := new(SessionRuleAddDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
