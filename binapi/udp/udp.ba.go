// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// source: vppapi/core/udp.api.json

/*
Package udp is a generated VPP binary API for 'udp' module.

It consists of:
	  2 enums
	  2 aliases
	  6 types
	  1 union
	  6 messages
	  3 services
*/
package udp

import (
	bytes "bytes"
	context "context"
	api "git.fd.io/govpp.git/api"
	struc "github.com/lunixbochs/struc"
	io "io"
	strconv "strconv"
)

const (
	// ModuleName is the name of this module.
	ModuleName = "udp"
	// APIVersion is the API version of this module.
	APIVersion = "1.1.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xfcde69e6
)

// AddressFamily represents VPP binary API enum 'address_family'.
type AddressFamily uint32

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var AddressFamily_name = map[uint32]string{
	0: "ADDRESS_IP4",
	1: "ADDRESS_IP6",
}

var AddressFamily_value = map[string]uint32{
	"ADDRESS_IP4": 0,
	"ADDRESS_IP6": 1,
}

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IPProto represents VPP binary API enum 'ip_proto'.
type IPProto uint32

const (
	IP_API_PROTO_TCP   IPProto = 6
	IP_API_PROTO_UDP   IPProto = 17
	IP_API_PROTO_EIGRP IPProto = 88
	IP_API_PROTO_OSPF  IPProto = 89
)

var IPProto_name = map[uint32]string{
	6:  "IP_API_PROTO_TCP",
	17: "IP_API_PROTO_UDP",
	88: "IP_API_PROTO_EIGRP",
	89: "IP_API_PROTO_OSPF",
}

var IPProto_value = map[string]uint32{
	"IP_API_PROTO_TCP":   6,
	"IP_API_PROTO_UDP":   17,
	"IP_API_PROTO_EIGRP": 88,
	"IP_API_PROTO_OSPF":  89,
}

func (x IPProto) String() string {
	s, ok := IPProto_name[uint32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// IP4Address represents VPP binary API alias 'ip4_address'.
type IP4Address [4]uint8

// IP6Address represents VPP binary API alias 'ip6_address'.
type IP6Address [16]uint8

// Address represents VPP binary API type 'address'.
type Address struct {
	Af AddressFamily
	Un AddressUnion
}

func (*Address) GetTypeName() string {
	return "address"
}

// IP4Prefix represents VPP binary API type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address
	Len     uint8
}

func (*IP4Prefix) GetTypeName() string {
	return "ip4_prefix"
}

// IP6Prefix represents VPP binary API type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address
	Len     uint8
}

func (*IP6Prefix) GetTypeName() string {
	return "ip6_prefix"
}

// Mprefix represents VPP binary API type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily
	GrpAddressLength uint16
	GrpAddress       AddressUnion
	SrcAddress       AddressUnion
}

func (*Mprefix) GetTypeName() string {
	return "mprefix"
}

// Prefix represents VPP binary API type 'prefix'.
type Prefix struct {
	Address Address
	Len     uint8
}

func (*Prefix) GetTypeName() string {
	return "prefix"
}

// UDPEncap represents VPP binary API type 'udp_encap'.
type UDPEncap struct {
	TableID uint32
	SrcPort uint16
	DstPort uint16
	SrcIP   Address
	DstIP   Address
	ID      uint32
}

func (*UDPEncap) GetTypeName() string {
	return "udp_encap"
}

// AddressUnion represents VPP binary API union 'address_union'.
type AddressUnion struct {
	XXX_UnionData [16]byte
}

func (*AddressUnion) GetTypeName() string {
	return "address_union"
}

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	var b = new(bytes.Buffer)
	if err := struc.Pack(b, &a); err != nil {
		return
	}
	copy(u.XXX_UnionData[:], b.Bytes())
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	var b = bytes.NewReader(u.XXX_UnionData[:])
	struc.Unpack(b, &a)
	return
}

// UDPEncapAdd represents VPP binary API message 'udp_encap_add'.
type UDPEncapAdd struct {
	UDPEncap UDPEncap
}

func (*UDPEncapAdd) GetMessageName() string {
	return "udp_encap_add"
}
func (*UDPEncapAdd) GetCrcString() string {
	return "6d68f146"
}
func (*UDPEncapAdd) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// UDPEncapAddReply represents VPP binary API message 'udp_encap_add_reply'.
type UDPEncapAddReply struct {
	Retval int32
	ID     uint32
}

func (*UDPEncapAddReply) GetMessageName() string {
	return "udp_encap_add_reply"
}
func (*UDPEncapAddReply) GetCrcString() string {
	return "e2fc8294"
}
func (*UDPEncapAddReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// UDPEncapDel represents VPP binary API message 'udp_encap_del'.
type UDPEncapDel struct {
	ID uint32
}

func (*UDPEncapDel) GetMessageName() string {
	return "udp_encap_del"
}
func (*UDPEncapDel) GetCrcString() string {
	return "3a91bde5"
}
func (*UDPEncapDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}

// UDPEncapDelReply represents VPP binary API message 'udp_encap_del_reply'.
type UDPEncapDelReply struct {
	Retval int32
}

func (*UDPEncapDelReply) GetMessageName() string {
	return "udp_encap_del_reply"
}
func (*UDPEncapDelReply) GetCrcString() string {
	return "e8d4e804"
}
func (*UDPEncapDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// UDPEncapDetails represents VPP binary API message 'udp_encap_details'.
type UDPEncapDetails struct {
	UDPEncap UDPEncap
}

func (*UDPEncapDetails) GetMessageName() string {
	return "udp_encap_details"
}
func (*UDPEncapDetails) GetCrcString() string {
	return "547c034b"
}
func (*UDPEncapDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

// UDPEncapDump represents VPP binary API message 'udp_encap_dump'.
type UDPEncapDump struct{}

func (*UDPEncapDump) GetMessageName() string {
	return "udp_encap_dump"
}
func (*UDPEncapDump) GetCrcString() string {
	return "51077d14"
}
func (*UDPEncapDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func init() {
	api.RegisterMessage((*UDPEncapAdd)(nil), "udp.UDPEncapAdd")
	api.RegisterMessage((*UDPEncapAddReply)(nil), "udp.UDPEncapAddReply")
	api.RegisterMessage((*UDPEncapDel)(nil), "udp.UDPEncapDel")
	api.RegisterMessage((*UDPEncapDelReply)(nil), "udp.UDPEncapDelReply")
	api.RegisterMessage((*UDPEncapDetails)(nil), "udp.UDPEncapDetails")
	api.RegisterMessage((*UDPEncapDump)(nil), "udp.UDPEncapDump")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*UDPEncapAdd)(nil),
		(*UDPEncapAddReply)(nil),
		(*UDPEncapDel)(nil),
		(*UDPEncapDelReply)(nil),
		(*UDPEncapDetails)(nil),
		(*UDPEncapDump)(nil),
	}
}

// RPCService represents RPC service API for udp module.
type RPCService interface {
	DumpUDPEncap(ctx context.Context, in *UDPEncapDump) (RPCService_DumpUDPEncapClient, error)
	UDPEncapAdd(ctx context.Context, in *UDPEncapAdd) (*UDPEncapAddReply, error)
	UDPEncapDel(ctx context.Context, in *UDPEncapDel) (*UDPEncapDelReply, error)
}

type serviceClient struct {
	ch api.Channel
}

func NewServiceClient(ch api.Channel) RPCService {
	return &serviceClient{ch}
}

func (c *serviceClient) DumpUDPEncap(ctx context.Context, in *UDPEncapDump) (RPCService_DumpUDPEncapClient, error) {
	stream := c.ch.SendMultiRequest(in)
	x := &serviceClient_DumpUDPEncapClient{stream}
	return x, nil
}

type RPCService_DumpUDPEncapClient interface {
	Recv() (*UDPEncapDetails, error)
}

type serviceClient_DumpUDPEncapClient struct {
	api.MultiRequestCtx
}

func (c *serviceClient_DumpUDPEncapClient) Recv() (*UDPEncapDetails, error) {
	m := new(UDPEncapDetails)
	stop, err := c.MultiRequestCtx.ReceiveReply(m)
	if err != nil {
		return nil, err
	}
	if stop {
		return nil, io.EOF
	}
	return m, nil
}

func (c *serviceClient) UDPEncapAdd(ctx context.Context, in *UDPEncapAdd) (*UDPEncapAddReply, error) {
	out := new(UDPEncapAddReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UDPEncapDel(ctx context.Context, in *UDPEncapDel) (*UDPEncapDelReply, error) {
	out := new(UDPEncapDelReply)
	err := c.ch.SendRequest(in).ReceiveReply(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion1 // please upgrade the GoVPP api package

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
